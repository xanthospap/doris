#include "atmosphere.hpp"
#include "compact2dmat.hpp"
#include <cmath>
#ifdef DEBUG
#include <cassert>
#endif
#include <cstdio>
#include <cstring>

/// Functions implementing the MSISE-00 models.
/// See https://ccmc.gsfc.nasa.gov/pub/modelweb/atmospheric/msis/nrlmsise00

struct trignums {
  double trigs[6];

  void compute(double hr, double tloc) noexcept {
    trigs[0] = std::sin(hr * tloc);
    trigs[1] = std::cos(hr * tloc);
    trigs[2] = std::sin(2e0 * hr * tloc);
    trigs[3] = std::cos(2e0 * hr * tloc);
    trigs[4] = std::sin(3e0 * hr * tloc);
    trigs[5] = std::cos(3e0 * hr * tloc);
  }

  double &stloc() noexcept { return trigs[0]; }
  double &ctloc() noexcept { return trigs[1]; }
  double &s2tloc() noexcept { return trigs[2]; }
  double &c2tloc() noexcept { return trigs[3]; }
  double &s3tloc() noexcept { return trigs[4]; }
  double &c3tloc() noexcept { return trigs[5]; }

  const double &stloc() const noexcept { return trigs[0]; }
  const double &ctloc() const noexcept { return trigs[1]; }
  const double &s2tloc() const noexcept { return trigs[2]; }
  const double &c2tloc() const noexcept { return trigs[3]; }
  const double &s3tloc() const noexcept { return trigs[4]; }
  const double &c3tloc() const noexcept { return trigs[5]; }
}; // trignums

// temperature
static double pt[150] = {
    9.86573e-01,  1.62228e-02,  1.55270e-02,  -1.04323e-01, -3.75801e-03,
    -1.18538e-03, -1.24043e-01, 4.56820e-03,  8.76018e-03,  -1.36235e-01,
    -3.52427e-02, 8.84181e-03,  -5.92127e-03, -8.61650e+00, 0.00000e+00,
    1.28492e-02,  0.00000e+00,  1.30096e+02,  1.04567e-02,  1.65686e-03,
    -5.53887e-06, 2.97810e-03,  0.00000e+00,  5.13122e-03,  8.66784e-02,
    1.58727e-01,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -7.27026e-06,
    0.00000e+00,  6.74494e+00,  4.93933e-03,  2.21656e-03,  2.50802e-03,
    0.00000e+00,  0.00000e+00,  -2.08841e-02, -1.79873e+00, 1.45103e-03,
    2.81769e-04,  -1.44703e-03, -5.16394e-05, 8.47001e-02,  1.70147e-01,
    5.72562e-03,  5.07493e-05,  4.36148e-03,  1.17863e-04,  4.74364e-03,
    6.61278e-03,  4.34292e-05,  1.44373e-03,  2.41470e-05,  2.84426e-03,
    8.56560e-04,  2.04028e-03,  0.00000e+00,  -3.15994e+03, -2.46423e-03,
    1.13843e-03,  4.20512e-04,  0.00000e+00,  -9.77214e+01, 6.77794e-03,
    5.27499e-03,  1.14936e-03,  0.00000e+00,  -6.61311e-03, -1.84255e-02,
    -1.96259e-02, 2.98618e+04,  0.00000e+00,  0.00000e+00,  0.00000e+00,
    6.44574e+02,  8.84668e-04,  5.05066e-04,  0.00000e+00,  4.02881e+03,
    -1.89503e-03, 0.00000e+00,  0.00000e+00,  8.21407e-04,  2.06780e-03,
    0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
    -1.20410e-02, -3.63963e-03, 9.92070e-05,  -1.15284e-04, -6.33059e-05,
    -6.05545e-01, 8.34218e-03,  -9.13036e+01, 3.71042e-04,  0.00000e+00,
    4.19000e-04,  2.70928e-03,  3.31507e-03,  -4.44508e-03, -4.96334e-03,
    -1.60449e-03, 3.95119e-03,  2.48924e-03,  5.09815e-04,  4.05302e-03,
    2.24076e-03,  0.00000e+00,  6.84256e-03,  4.66354e-04,  0.00000e+00,
    -3.68328e-04, 0.00000e+00,  0.00000e+00,  -1.46870e+02, 0.00000e+00,
    0.00000e+00,  1.09501e-03,  4.65156e-04,  5.62583e-04,  3.21596e+00,
    6.43168e-04,  3.14860e-03,  3.40738e-03,  1.78481e-03,  9.62532e-04,
    5.58171e-04,  3.43731e+00,  -2.33195e-01, 5.10289e-04,  0.00000e+00,
    0.00000e+00,  -9.25347e+04, 0.00000e+00,  -1.99639e-03, 0.00000e+00,
    0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00};

static double pd[9][150] = {
    //  HE density
    {1.09979e+00,  -4.88060e-02, -1.97501e-01, -9.10280e-02, -6.96558e-03,
     2.42136e-02,  3.91333e-01,  -7.20068e-03, -3.22718e-02, 1.41508e+00,
     1.68194e-01,  1.85282e-02,  1.09384e-01,  -7.24282e+00, 0.00000e+00,
     2.96377e-01,  -4.97210e-02, 1.04114e+02,  -8.61108e-02, -7.29177e-04,
     1.48998e-06,  1.08629e-03,  0.00000e+00,  0.00000e+00,  8.31090e-02,
     1.12818e-01,  -5.75005e-02, -1.29919e-02, -1.78849e-02, -2.86343e-06,
     0.00000e+00,  -1.51187e+02, -6.65902e-03, 0.00000e+00,  -2.02069e-03,
     0.00000e+00,  0.00000e+00,  4.32264e-02,  -2.80444e+01, -3.26789e-03,
     2.47461e-03,  0.00000e+00,  0.00000e+00,  9.82100e-02,  1.22714e-01,
     -3.96450e-02, 0.00000e+00,  -2.76489e-03, 0.00000e+00,  1.87723e-03,
     -8.09813e-03, 4.34428e-05,  -7.70932e-03, 0.00000e+00,  -2.28894e-03,
     -5.69070e-03, -5.22193e-03, 6.00692e-03,  -7.80434e+03, -3.48336e-03,
     -6.38362e-03, -1.82190e-03, 0.00000e+00,  -7.58976e+01, -2.17875e-02,
     -1.72524e-02, -9.06287e-03, 0.00000e+00,  2.44725e-02,  8.66040e-02,
     1.05712e-01,  3.02543e+04,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     -6.01364e+03, -5.64668e-03, -2.54157e-03, 0.00000e+00,  3.15611e+02,
     -5.69158e-03, 0.00000e+00,  0.00000e+00,  -4.47216e-03, -4.49523e-03,
     4.64428e-03,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     4.51236e-02,  2.46520e-02,  6.17794e-03,  0.00000e+00,  0.00000e+00,
     -3.62944e-01, -4.80022e-02, -7.57230e+01, -1.99656e-03, 0.00000e+00,
     -5.18780e-03, -1.73990e-02, -9.03485e-03, 7.48465e-03,  1.53267e-02,
     1.06296e-02,  1.18655e-02,  2.55569e-03,  1.69020e-03,  3.51936e-02,
     -1.81242e-02, 0.00000e+00,  -1.00529e-01, -5.10574e-03, 0.00000e+00,
     2.10228e-03,  0.00000e+00,  0.00000e+00,  -1.73255e+02, 5.07833e-01,
     -2.41408e-01, 8.75414e-03,  2.77527e-03,  -8.90353e-05, -5.25148e+00,
     -5.83899e-03, -2.09122e-02, -9.63530e-03, 9.77164e-03,  4.07051e-03,
     2.53555e-04,  -5.52875e+00, -3.55993e-01, -2.49231e-03, 0.00000e+00,
     0.00000e+00,  2.86026e+01,  0.00000e+00,  3.42722e-04,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00},
    // O density
    {1.02315e+00,  -1.59710e-01, -1.06630e-01, -1.77074e-02, -4.42726e-03,
     3.44803e-02,  4.45613e-02,  -3.33751e-02, -5.73598e-02, 3.50360e-01,
     6.33053e-02,  2.16221e-02,  5.42577e-02,  -5.74193e+00, 0.00000e+00,
     1.90891e-01,  -1.39194e-02, 1.01102e+02,  8.16363e-02,  1.33717e-04,
     6.54403e-06,  3.10295e-03,  0.00000e+00,  0.00000e+00,  5.38205e-02,
     1.23910e-01,  -1.39831e-02, 0.00000e+00,  0.00000e+00,  -3.95915e-06,
     0.00000e+00,  -7.14651e-01, -5.01027e-03, 0.00000e+00,  -3.24756e-03,
     0.00000e+00,  0.00000e+00,  4.42173e-02,  -1.31598e+01, -3.15626e-03,
     1.24574e-03,  -1.47626e-03, -1.55461e-03, 6.40682e-02,  1.34898e-01,
     -2.42415e-02, 0.00000e+00,  0.00000e+00,  0.00000e+00,  6.13666e-04,
     -5.40373e-03, 2.61635e-05,  -3.33012e-03, 0.00000e+00,  -3.08101e-03,
     -2.42679e-03, -3.36086e-03, 0.00000e+00,  -1.18979e+03, -5.04738e-02,
     -2.61547e-03, -1.03132e-03, 1.91583e-04,  -8.38132e+01, -1.40517e-02,
     -1.14167e-02, -4.08012e-03, 1.73522e-04,  -1.39644e-02, -6.64128e-02,
     -6.85152e-02, -1.34414e+04, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     6.07916e+02,  -4.12220e-03, -2.20996e-03, 0.00000e+00,  1.70277e+03,
     -4.63015e-03, 0.00000e+00,  0.00000e+00,  -2.25360e-03, -2.96204e-03,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     3.92786e-02,  1.31186e-02,  -1.78086e-03, 0.00000e+00,  0.00000e+00,
     -3.90083e-01, -2.84741e-02, -7.78400e+01, -1.02601e-03, 0.00000e+00,
     -7.26485e-04, -5.42181e-03, -5.59305e-03, 1.22825e-02,  1.23868e-02,
     6.68835e-03,  -1.03303e-02, -9.51903e-03, 2.70021e-04,  -2.57084e-02,
     -1.32430e-02, 0.00000e+00,  -3.81000e-02, -3.16810e-03, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  -9.05762e-04, -2.14590e-03, -1.17824e-03, 3.66732e+00,
     -3.79729e-04, -6.13966e-03, -5.09082e-03, -1.96332e-03, -3.08280e-03,
     -9.75222e-04, 4.03315e+00,  -2.52710e-01, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00},
    // N2 density
    {1.16112e+00, 0.00000e+00,  0.00000e+00, 3.33725e-02,  0.00000e+00,
     3.48637e-02, -5.44368e-03, 0.00000e+00, -6.73940e-02, 1.74754e-01,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 1.74712e+02,  0.00000e+00,
     1.26733e-01, 0.00000e+00,  1.03154e+02, 5.52075e-02,  0.00000e+00,
     0.00000e+00, 8.13525e-04,  0.00000e+00, 0.00000e+00,  8.66784e-02,
     1.58727e-01, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, -2.50482e+01, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  -2.48894e-03,
     6.16053e-04, -5.79716e-04, 2.95482e-03, 8.47001e-02,  1.70147e-01,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 2.47425e-05,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00},
    // TLB
    {9.44846e-01,  0.00000e+00,  0.00000e+00,  -3.08617e-02, 0.00000e+00,
     -2.44019e-02, 6.48607e-03,  0.00000e+00,  3.08181e-02,  4.59392e-02,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  1.74712e+02,  0.00000e+00,
     2.13260e-02,  0.00000e+00,  -3.56958e+02, 0.00000e+00,  1.82278e-04,
     0.00000e+00,  3.07472e-04,  0.00000e+00,  0.00000e+00,  8.66784e-02,
     1.58727e-01,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  3.83054e-03,  0.00000e+00,  0.00000e+00,
     -1.93065e-03, -1.45090e-03, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  -1.23493e-03, 1.36736e-03,  8.47001e-02,  1.70147e-01,
     3.71469e-03,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     5.10250e-03,  2.47425e-05,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  3.68756e-03,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00},
    // O2 density
    {1.35580e+00,  1.44816e-01,  0.00000e+00, 6.07767e-02,  0.00000e+00,
     2.94777e-02,  7.46900e-02,  0.00000e+00, -9.23822e-02, 8.57342e-02,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 2.38636e+01,  0.00000e+00,
     7.71653e-02,  0.00000e+00,  8.18751e+01, 1.87736e-02,  0.00000e+00,
     0.00000e+00,  1.49667e-02,  0.00000e+00, 0.00000e+00,  8.66784e-02,
     1.58727e-01,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  -3.67874e+02, 5.48158e-03, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 8.47001e-02,  1.70147e-01,
     1.22631e-02,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     8.17187e-03,  3.71617e-05,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  -2.10826e-03,
     -3.13640e-03, 0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     -7.35742e-02, -5.00266e-02, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  1.94965e-02,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00,  0.00000e+00},
    // AR density
    {1.04761e+00,  2.00165e-01,  2.37697e-01,  3.68552e-02,  0.00000e+00,
     3.57202e-02,  -2.14075e-01, 0.00000e+00,  -1.08018e-01, -3.73981e-01,
     0.00000e+00,  3.10022e-02,  -1.16305e-03, -2.07596e+01, 0.00000e+00,
     8.64502e-02,  0.00000e+00,  9.74908e+01,  5.16707e-02,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  8.66784e-02,
     1.58727e-01,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  3.46193e+02,  1.34297e-02,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -3.48509e-03,
     -1.54689e-04, 0.00000e+00,  0.00000e+00,  8.47001e-02,  1.70147e-01,
     1.47753e-02,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     1.89320e-02,  3.68181e-05,  1.32570e-02,  0.00000e+00,  0.00000e+00,
     3.59719e-03,  7.44328e-03,  -1.00023e-03, -6.50528e+03, 0.00000e+00,
     1.03485e-02,  -1.00983e-03, -4.06916e-03, -6.60864e+01, -1.71533e-02,
     1.10605e-02,  1.20300e-02,  -5.20034e-03, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     -2.62769e+03, 7.13755e-03,  4.17999e-03,  0.00000e+00,  1.25910e+04,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  -2.23595e-03, 4.60217e-03,
     5.71794e-03,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     -3.18353e-02, -2.35526e-02, -1.36189e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  2.03522e-02,  -6.67837e+01, -1.09724e-03, 0.00000e+00,
     -1.38821e-02, 1.60468e-02,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  1.51574e-02,
     -5.44470e-04, 0.00000e+00,  7.28224e-02,  6.59413e-02,  0.00000e+00,
     -5.15692e-03, 0.00000e+00,  0.00000e+00,  -3.70367e+03, 0.00000e+00,
     0.00000e+00,  1.36131e-02,  5.38153e-03,  0.00000e+00,  4.76285e+00,
     -1.75677e-02, 2.26301e-02,  0.00000e+00,  1.76631e-02,  4.77162e-03,
     0.00000e+00,  5.39354e+00,  0.00000e+00,  -7.51710e-03, 0.00000e+00,
     0.00000e+00,  -8.82736e+01, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00},
    // H density
    {1.26376e+00,  -2.14304e-01, -1.49984e-01, 2.30404e-01,  2.98237e-02,
     2.68673e-02,  2.96228e-01,  2.21900e-02,  -2.07655e-02, 4.52506e-01,
     1.20105e-01,  3.24420e-02,  4.24816e-02,  -9.14313e+00, 0.00000e+00,
     2.47178e-02,  -2.88229e-02, 8.12805e+01,  5.10380e-02,  -5.80611e-03,
     2.51236e-05,  -1.24083e-02, 0.00000e+00,  0.00000e+00,  8.66784e-02,
     1.58727e-01,  -3.48190e-02, 0.00000e+00,  0.00000e+00,  2.89885e-05,
     0.00000e+00,  1.53595e+02,  -1.68604e-02, 0.00000e+00,  1.01015e-02,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.84552e-04,
     -1.22181e-03, 0.00000e+00,  0.00000e+00,  8.47001e-02,  1.70147e-01,
     -1.04927e-02, 0.00000e+00,  0.00000e+00,  0.00000e+00,  -5.91313e-03,
     -2.30501e-02, 3.14758e-05,  0.00000e+00,  0.00000e+00,  1.26956e-02,
     8.35489e-03,  3.10513e-04,  0.00000e+00,  3.42119e+03,  -2.45017e-03,
     -4.27154e-04, 5.45152e-04,  1.89896e-03,  2.89121e+01,  -6.49973e-03,
     -1.93855e-02, -1.48492e-02, 0.00000e+00,  -5.10576e-02, 7.87306e-02,
     9.51981e-02,  -1.49422e+04, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     2.65503e+02,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  6.37110e-03,  3.24789e-04,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     6.14274e-02,  1.00376e-02,  -8.41083e-04, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  -1.27099e-02, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     -3.94077e-03, -1.28601e-02, -7.97616e-03, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  -6.71465e-03, -1.69799e-03, 1.93772e-03,  3.81140e+00,
     -7.79290e-03, -1.82589e-02, -1.25860e-02, -1.04311e-02, -3.02465e-03,
     2.43063e-03,  3.63237e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00},
    // N DENSITY
    {7.09557e+01,  -3.26740e-01, 0.00000e+00,  -5.16829e-01, -1.71664e-03,
     9.09310e-02,  -6.71500e-01, -1.47771e-01, -9.27471e-02, -2.30862e-01,
     -1.56410e-01, 1.34455e-02,  -1.19717e-01, 2.52151e+00,  0.00000e+00,
     -2.41582e-01, 5.92939e-02,  4.39756e+00,  9.15280e-02,  4.41292e-03,
     0.00000e+00,  8.66807e-03,  0.00000e+00,  0.00000e+00,  8.66784e-02,
     1.58727e-01,  9.74701e-02,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  6.70217e+01,  -1.31660e-03, 0.00000e+00,  -1.65317e-02,
     0.00000e+00,  0.00000e+00,  8.50247e-02,  2.77428e+01,  4.98658e-03,
     6.15115e-03,  9.50156e-03,  -2.12723e-02, 8.47001e-02,  1.70147e-01,
     -2.38645e-02, 0.00000e+00,  0.00000e+00,  0.00000e+00,  1.37380e-03,
     -8.41918e-03, 2.80145e-05,  7.12383e-03,  0.00000e+00,  -1.66209e-02,
     1.03533e-04,  -1.68898e-02, 0.00000e+00,  3.64526e+03,  0.00000e+00,
     6.54077e-03,  3.69130e-04,  9.94419e-04,  8.42803e+01,  -1.16124e-02,
     -7.74414e-03, -1.68844e-03, 1.42809e-03,  -1.92955e-03, 1.17225e-01,
     -2.41512e-02, 1.50521e+04,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     1.60261e+03,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  -3.54403e-04, -1.87270e-02,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     2.76439e-02,  6.43207e-03,  -3.54300e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  -2.80221e-02, 8.11228e+01,  -6.75255e-04, 0.00000e+00,
     -1.05162e-02, -3.48292e-03, -6.97321e-03, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  -1.45546e-03, -1.31970e-02, -3.57751e-03, -1.09021e+00,
     -1.50181e-02, -7.12841e-03, -6.64590e-03, -3.52610e-03, -1.87773e-02,
     -2.22432e-03, -3.93895e-01, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00},
    // hot O density
    {6.04050e-02,  1.57034e+00, 2.99387e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  -1.51018e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, -8.61650e+00, 1.26454e-02,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  5.50878e-03, 0.00000e+00, 0.00000e+00,  8.66784e-02,
     1.58727e-01,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 6.23881e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 8.47001e-02,  1.70147e-01,
     -9.45934e-02, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00}};

// S param
const double ps[150] = {
    9.56827e-01, 6.20637e-02, 3.18433e-02,  0.00000e+00,  0.00000e+00,
    3.94900e-02, 0.00000e+00, 0.00000e+00,  -9.24882e-03, -7.94023e-03,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  1.74712e+02,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 2.74677e-03, 0.00000e+00,  1.54951e-02,  8.66784e-02,
    1.58727e-01, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  -6.99007e-04, 0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 1.24362e-02, -5.28756e-03, 8.47001e-02,  1.70147e-01,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 2.47425e-05, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,  0.00000e+00};

// turbo
const double pdl[2][25] = {
    {1.09930e+00, 3.90631e+00, 3.07165e+00, 9.86161e-01, 1.63536e+01,
     4.63830e+00, 1.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00, 0.00000e+00, 1.28840e+00, 3.10302e-02, 1.18339e-01},
    {1.00000e+00, 7.00000e-01,  1.15020e+00, 3.44689e+00,  1.28840e+00,
     1.00000e+00, 1.08738e+00,  1.22947e+00, 1.10016e+00,  7.34129e-01,
     1.15241e+00, 2.22784e+00,  7.95046e-01, 4.01612e+00,  4.47749e+00,
     1.23435e+02, -7.60535e-02, 1.68986e-06, 7.44294e-01,  1.03604e+00,
     1.72783e+02, 1.15020e+00,  3.44689e+00, -7.46230e-01, 9.49154e-01}};

// lower boundary
const double ptm[50] = {1.04130e+03,  3.86000e+02, 1.95000e+02, 1.66728e+01,
                        2.13000e+02,  1.20000e+02, 2.40000e+02, 1.87000e+02,
                        -2.00000e+00, 0.00000e+00};

const double pdm[8][10] = {
    {2.45600e+07, 6.71072e-06, 1.00000e+02, 0.00000e+00, 1.10000e+02,
     1.00000e+01, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00},
    {8.59400e+10, 1.00000e+00, 1.05000e+02, -8.00000e+00, 1.10000e+02,
     1.00000e+01, 9.00000e+01, 2.00000e+00, 0.00000e+00, 0.00000e+00},
    {2.81000e+11, 0.00000e+00, 1.05000e+02, 2.80000e+01, 2.89500e+01,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00},
    {3.30000e+10, 2.68270e-01, 1.05000e+02, 1.00000e+00, 1.10000e+02,
     1.00000e+01, 1.10000e+02, -1.00000e+01, 0.00000e+00, 0.00000e+00},
    {1.33000e+09, 1.19615e-02, 1.05000e+02, 0.00000e+00, 1.10000e+02,
     1.00000e+01, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00},
    {1.76100e+05, 1.00000e+00, 9.50000e+01, -8.00000e+00, 1.10000e+02,
     1.00000e+01, 9.00000e+01, 2.00000e+00, 0.00000e+00, 0.00000e+00},
    {1.00000e+07, 1.00000e+00, 1.05000e+02, -8.00000e+00, 1.10000e+02,
     1.00000e+01, 9.00000e+01, 2.00000e+00, 0.00000e+00, 0.00000e+00},
    {1.00000e+06, 1.00000e+00, 1.05000e+02, -8.00000e+00, 5.50000e+02,
     7.60000e+01, 9.00000e+01, 2.00000e+00, 0.00000e+00, 4.00000e+03}};

const double ptl[4][100] = {
    // TN1(2)
    {1.00858e+00,  4.56011e-02,  -2.22972e-02, -5.44388e-02, 5.23136e-04,
     -1.88849e-02, 5.23707e-02,  -9.43646e-03, 6.31707e-03,  -7.80460e-02,
     -4.88430e-02, 0.00000e+00,  0.00000e+00,  -7.60250e+00, 0.00000e+00,
     -1.44635e-02, -1.76843e-02, -1.21517e+02, 2.85647e-02,  0.00000e+00,
     0.00000e+00,  6.31792e-04,  0.00000e+00,  5.77197e-03,  8.66784e-02,
     1.58727e-01,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  -8.90272e+03, 3.30611e-03,  3.02172e-03,  0.00000e+00,
     -2.13673e-03, -3.20910e-04, 0.00000e+00,  0.00000e+00,  2.76034e-03,
     2.82487e-03,  -2.97592e-04, -4.21534e-03, 8.47001e-02,  1.70147e-01,
     8.96456e-03,  0.00000e+00,  -1.08596e-02, 0.00000e+00,  0.00000e+00,
     5.57917e-03,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  9.65405e-03,  0.00000e+00,  0.00000e+00,  2.00000e+00},
    //  TN1(3)
    {9.39664e-01,  8.56514e-02,  -6.79989e-03, 2.65929e-02,  -4.74283e-03,
     1.21855e-02,  -2.14905e-02, 6.49651e-03,  -2.05477e-02, -4.24952e-02,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  1.19148e+01,  0.00000e+00,
     1.18777e-02,  -7.28230e-02, -8.15965e+01, 1.73887e-02,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  -1.44691e-02, 2.80259e-04,  8.66784e-02,
     1.58727e-01,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  2.16584e+02,  3.18713e-03,  7.37479e-03,  0.00000e+00,
     -2.55018e-03, -3.92806e-03, 0.00000e+00,  0.00000e+00,  -2.89757e-03,
     -1.33549e-03, 1.02661e-03,  3.53775e-04,  8.47001e-02,  1.70147e-01,
     -9.17497e-03, 0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     3.56082e-03,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  -1.00902e-02, 0.00000e+00,  0.00000e+00,  2.00000e+00},
    // TN1(4)
    {9.85982e-01,  -4.55435e-02, 1.21106e-02,  2.04127e-02,  -2.40836e-03,
     1.11383e-02,  -4.51926e-02, 1.35074e-02,  -6.54139e-03, 1.15275e-01,
     1.28247e-01,  0.00000e+00,  0.00000e+00,  -5.30705e+00, 0.00000e+00,
     -3.79332e-02, -6.24741e-02, 7.71062e-01,  2.96315e-02,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  6.81051e-03,  -4.34767e-03, 8.66784e-02,
     1.58727e-01,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  1.07003e+01,  -2.76907e-03, 4.32474e-04,  0.00000e+00,
     1.31497e-03,  -6.47517e-04, 0.00000e+00,  -2.20621e+01, -1.10804e-03,
     -8.09338e-04, 4.18184e-04,  4.29650e-03,  8.47001e-02,  1.70147e-01,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     -4.04337e-03, 0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -9.52550e-04,
     8.56253e-04,  4.33114e-04,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  1.21223e-03,
     2.38694e-04,  9.15245e-04,  1.28385e-03,  8.67668e-04,  -5.61425e-06,
     1.04445e+00,  3.41112e+01,  0.00000e+00,  -8.40704e-01, -2.39639e+02,
     7.06668e-01,  -2.05873e+01, -3.63696e-01, 2.39245e+01,  0.00000e+00,
     -1.06657e-03, -7.67292e-04, 1.54534e-04,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.00000e+00},
    // TN1(5) TN2(1)
    {1.00320e+00,  3.83501e-02,  -2.38983e-03, 2.83950e-03,  4.20956e-03,
     5.86619e-04,  2.19054e-02,  -1.00946e-02, -3.50259e-03, 4.17392e-02,
     -8.44404e-03, 0.00000e+00,  0.00000e+00,  4.96949e+00,  0.00000e+00,
     -7.06478e-03, -1.46494e-02, 3.13258e+01,  -1.86493e-03, 0.00000e+00,
     -1.67499e-02, 0.00000e+00,  0.00000e+00,  5.12686e-04,  8.66784e-02,
     1.58727e-01,  -4.64167e-03, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     4.37353e-03,  -1.99069e+02, 0.00000e+00,  -5.34884e-03, 0.00000e+00,
     1.62458e-03,  2.93016e-03,  2.67926e-03,  5.90449e+02,  0.00000e+00,
     0.00000e+00,  -1.17266e-03, -3.58890e-04, 8.47001e-02,  1.70147e-01,
     0.00000e+00,  0.00000e+00,  1.38673e-02,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  1.60571e-03,
     6.28078e-04,  5.05469e-05,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -1.57829e-03,
     -4.00855e-04, 5.04077e-05,  -1.39001e-03, -2.33406e-03, -4.81197e-04,
     1.46758e+00,  6.20332e+00,  0.00000e+00,  3.66476e-01,  -6.19760e+01,
     3.09198e-01,  -1.98999e+01, 0.00000e+00,  -3.29933e+02, 0.00000e+00,
     -1.10080e-03, -9.39310e-05, 1.39638e-04,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.00000e+00}};

const double pma[10][100] = {
    // TN2(2)
    {9.81637e-01,  -1.41317e-03, 3.87323e-02,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -3.58707e-02,
     -8.63658e-03, 0.00000e+00,  0.00000e+00,  -2.02226e+00, 0.00000e+00,
     -8.69424e-03, -1.91397e-02, 8.76779e+01,  4.52188e-03,  0.00000e+00,
     2.23760e-02,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  -7.07572e-03, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     -4.11210e-03, 3.50060e+01,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  -8.36657e-03, 1.61347e+01,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  -1.45130e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  1.24152e-03,
     6.43365e-04,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  1.33255e-03,
     2.42657e-03,  1.60666e-03,  -1.85728e-03, -1.46874e-03, -4.79163e-06,
     1.22464e+00,  3.53510e+01,  0.00000e+00,  4.49223e-01,  -4.77466e+01,
     4.70681e-01,  8.41861e+00,  -2.88198e-01, 1.67854e+02,  0.00000e+00,
     7.11493e-04,  6.05601e-04,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.00000e+00},
    // TN2(3)
    {1.00422e+00,  -7.11212e-03, 5.24480e-03,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -5.28914e-02,
     -2.41301e-02, 0.00000e+00,  0.00000e+00,  -2.12219e+01, -1.03830e-02,
     -3.28077e-03, 1.65727e-02,  1.68564e+00,  -6.68154e-03, 0.00000e+00,
     1.45155e-02,  0.00000e+00,  8.42365e-03,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  -4.34645e-03, 0.00000e+00,  0.00000e+00,  2.16780e-02,
     0.00000e+00,  -1.38459e+02, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  7.04573e-03,  -4.73204e+01, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  1.08767e-02,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -8.08279e-03,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  5.21769e-04,
     -2.27387e-04, 0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  3.26769e-03,
     3.16901e-03,  4.60316e-04,  -1.01431e-04, 1.02131e-03,  9.96601e-04,
     1.25707e+00,  2.50114e+01,  0.00000e+00,  4.24472e-01,  -2.77655e+01,
     3.44625e-01,  2.75412e+01,  0.00000e+00,  7.94251e+02,  0.00000e+00,
     2.45835e-03,  1.38871e-03,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.00000e+00},
    // TN2(4) TN3(1)
    {1.01890e+00,  -2.46603e-02, 1.00078e-02,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -6.70977e-02,
     -4.02286e-02, 0.00000e+00,  0.00000e+00,  -2.29466e+01, -7.47019e-03,
     2.26580e-03,  2.63931e-02,  3.72625e+01,  -6.39041e-03, 0.00000e+00,
     9.58383e-03,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  -1.85291e-03, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  1.39717e+02,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  9.19771e-03,  -3.69121e+02, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  -1.57067e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -7.07265e-03,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -2.92953e-03,
     -2.77739e-03, -4.40092e-04, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.47280e-03,
     2.95035e-04,  -1.81246e-03, 2.81945e-03,  4.27296e-03,  9.78863e-04,
     1.40545e+00,  -6.19173e+00, 0.00000e+00,  0.00000e+00,  -7.93632e+01,
     4.44643e-01,  -4.03085e+02, 0.00000e+00,  1.15603e+01,  0.00000e+00,
     2.25068e-03,  8.48557e-04,  -2.98493e-04, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.00000e+00},
    // TN3(2)
    {9.75801e-01,  3.80680e-02,  -3.05198e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  3.85575e-02,
     5.04057e-02,  0.00000e+00,  0.00000e+00,  -1.76046e+02, 1.44594e-02,
     -1.48297e-03, -3.68560e-03, 3.02185e+01,  -3.23338e-03, 0.00000e+00,
     1.53569e-02,  0.00000e+00,  -1.15558e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  4.89620e-03,  0.00000e+00,  0.00000e+00,  -1.00616e-02,
     -8.21324e-03, -1.57757e+02, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  6.63564e-03,  4.58410e+01,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  -2.51280e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  9.91215e-03,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -8.73148e-04,
     -1.29648e-03, -7.32026e-05, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -4.68110e-03,
     -4.66003e-03, -1.31567e-03, -7.39390e-04, 6.32499e-04,  -4.65588e-04,
     -1.29785e+00, -1.57139e+02, 0.00000e+00,  2.58350e-01,  -3.69453e+01,
     4.10672e-01,  9.78196e+00,  -1.52064e-01, -3.85084e+03, 0.00000e+00,
     -8.52706e-04, -1.40945e-03, -7.26786e-04, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.00000e+00},
    // TN3(3)
    {9.60722e-01,  7.03757e-02,  -3.00266e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.22671e-02,
     4.10423e-02,  0.00000e+00,  0.00000e+00,  -1.63070e+02, 1.06073e-02,
     5.40747e-04,  7.79481e-03,  1.44908e+02,  1.51484e-04,  0.00000e+00,
     1.97547e-02,  0.00000e+00,  -1.41844e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  5.77884e-03,  0.00000e+00,  0.00000e+00,  9.74319e-03,
     0.00000e+00,  -2.88015e+03, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  -4.44902e-03, -2.92760e+01, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  2.34419e-02,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  5.36685e-03,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -4.65325e-04,
     -5.50628e-04, 3.31465e-04,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -2.06179e-03,
     -3.08575e-03, -7.93589e-04, -1.08629e-04, 5.95511e-04,  -9.05050e-04,
     1.18997e+00,  4.15924e+01,  0.00000e+00,  -4.72064e-01, -9.47150e+02,
     3.98723e-01,  1.98304e+01,  0.00000e+00,  3.73219e+03,  0.00000e+00,
     -1.50040e-03, -1.14933e-03, -1.56769e-04, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.00000e+00},
    // TN3(4)
    {1.03123e+00,  -7.05124e-02, 8.71615e-03,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -3.82621e-02,
     -9.80975e-03, 0.00000e+00,  0.00000e+00,  2.89286e+01,  9.57341e-03,
     0.00000e+00,  0.00000e+00,  8.66153e+01,  7.91938e-04,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  4.68917e-03,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  7.86638e-03,  0.00000e+00,  0.00000e+00,  9.90827e-03,
     0.00000e+00,  6.55573e+01,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  -4.00200e+01, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  7.07457e-03,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  5.72268e-03,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -2.04970e-04,
     1.21560e-03,  -8.05579e-06, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -2.49941e-03,
     -4.57256e-04, -1.59311e-04, 2.96481e-04,  -1.77318e-03, -6.37918e-04,
     1.02395e+00,  1.28172e+01,  0.00000e+00,  1.49903e-01,  -2.63818e+01,
     0.00000e+00,  4.70628e+01,  -2.22139e-01, 4.82292e-02,  0.00000e+00,
     -8.67075e-04, -5.86479e-04, 5.32462e-04,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.00000e+00},
    // TN3(5) SURFACe TeMP TSL
    {1.00828e+00,  -9.10404e-02, -2.26549e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  -2.32420e-02,
     -9.08925e-03, 0.00000e+00,  0.00000e+00,  3.36105e+01,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  -1.24957e+01, -5.87939e-03, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  2.79765e+01,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  2.01237e+03,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  -1.75553e-02, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  3.29699e-03,
     1.26659e-03,  2.68402e-04,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  1.17894e-03,
     1.48746e-03,  1.06478e-04,  1.34743e-04,  -2.20939e-03, -6.23523e-04,
     6.36539e-01,  1.13621e+01,  0.00000e+00,  -3.93777e-01, 2.38687e+03,
     0.00000e+00,  6.61865e+02,  -1.21434e-01, 9.27608e+00,  0.00000e+00,
     1.68478e-04,  1.24892e-03,  1.71345e-03,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  2.00000e+00},
    // TGN3(2) SURFACe GRAD TSLG
    {1.57293e+00,  -6.78400e-01, 6.47500e-01, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, -7.62974e-02,
     -3.60423e-01, 0.00000e+00,  0.00000e+00, 1.28358e+02, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  4.68038e+01, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  -1.67898e-01, 0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  2.90994e+04,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 3.15706e+01, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00, 0.00000e+00, 2.00000e+00},
    // TGN2(1) TGN1(2)
    {8.60028e-01, 3.77052e-01, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  -1.17570e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 7.77757e-03,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 1.01024e+02, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 6.54251e+02, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  -1.56959e-02,
     1.91001e-02, 3.15971e-02, 1.00982e-02, -6.71565e-03, 2.57693e-03,
     1.38692e+00, 2.82132e-01, 0.00000e+00, 0.00000e+00,  3.81511e+02,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  0.00000e+00,
     0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,  2.00000e+00},
    // TGN3(1) TGN2(2)
    {1.06029e+00,  -5.25231e-02, 3.73034e-01,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  3.31072e-02,
     -3.88409e-01, 0.00000e+00,  0.00000e+00,  -1.65295e+02, -2.13801e-01,
     -4.38916e-02, -3.22716e-01, -8.82393e+01, 1.18458e-01,  0.00000e+00,
     -4.35863e-01, 0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  -1.19782e-01, 0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  2.62229e+01,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  -5.37443e+01, 0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  -4.55788e-01, 0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  3.84009e-02,
     3.96733e-02,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  5.05494e-02,
     7.39617e-02,  1.92200e-02,  -8.46151e-03, -1.34244e-02, 1.96338e-02,
     1.50421e+00,  1.88368e+01,  0.00000e+00,  0.00000e+00,  -5.13114e+01,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     5.11923e-02,  3.61225e-02,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000E+00,  0.00000E+00,  2.00000e+00}};

// semiannual mult sam
const double sam[100] = {
    1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00,
    1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00,
    1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00,
    1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00,
    1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00,
    1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00,
    1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00,
    1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00,
    1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00,
    1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00, 1.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
    0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00};

// middle atmosphere averages
const double pavgm[10] = {2.61000e+02, 2.64000e+02, 2.29000e+02, 2.17000e+02,
                          2.17000e+02, 2.23000e+02, 2.86760e+02, -2.93940e+00,
                          2.50000e+00, 0.00000e+00};

// parmb
static double gsurf;
static double re;

//// gts3c
static double dd;

//// dmix
static double dm04, dm16, dm28, dm32, dm40, dm01, dm14;

//// lpoly
static double dfa;
static double apdf, apt[4];

//// meso7
static double meso_tn1[5];
static double meso_tn2[4];
static double meso_tn3[5];
static double meso_tgn1[2];
static double meso_tgn2[2];
static double meso_tgn3[2];

/// @param[out] sw  An array of 24 doubles
/// @param[out] swc An array of 24 doubles
void tselec(const int *switches, double *sw, double *swc) noexcept {
  for (int i = 0; i < 24; i++) {
    sw[i] = (switches[i] == 1) * 1e0;
    swc[i] = (switches[i] > 0) * 1e0;
  }
  sw[9] = switches[9];
  swc[9] = switches[9];
}

void glatf(double lat, double &gv, double &reff) noexcept {
  constexpr double dgtr = 1.74533e-2;
  const double c2 = std::cos(2e0 * dgtr * lat);
  gv = 980.616e0 * (1e0 - 0.0026373e0 * c2);
  reff = 2e0 * gv / (3.085462e-6 + 2.27e-9 * c2) * 1.0e-5;
}

double ccor(double alt, double r, double h1, double zh) noexcept {
  // CHEMISTRY/DISSOCIATION CORRECTION FOR MSIS MODELS
  // ALT - altitude
  // R - target ratio
  // H1 - transition scale length
  // ZH - altitude of 1/2 R
  const double e = (alt - zh) / h1;
  if (e > 70)
    return std::exp(0);
  if (e < -70)
    return std::exp(r);

  const double ex = std::exp(e);
  return std::exp(r / (1e0 + ex));
}

double ccor2(double alt, double r, double h1, double zh, double h2) noexcept {
  // CHEMISTRY/DISSOCIATION CORRECTION FOR MSIS MODELS
  // ALT - altitude
  // R - target ratio
  // H1 - transition scale length
  // ZH - altitude of 1/2 R
  // H2 - transition scale length #2 ?
  const double e1 = (alt - zh) / h1;
  const double e2 = (alt - zh) / h2;
  if ((e1 > 70) || (e2 > 70))
    return std::exp(0);
  if ((e1 < -70) && (e2 < -70))
    return std::exp(r);
  return std::exp(r / (1e0 + 0.5e0 * (std::exp(e1) + std::exp(e2))));
}

double scalh(double alt, double xm, double temp) noexcept {
  constexpr double rgas = 831.4e0;
  const double g = gsurf / (std::pow((1e0 + alt / re), 2e0));
  return rgas * temp / (g * xm);
}

double dnet(double dd2, double dm, double zhm, double xmm, double xm) noexcept {
  // TURBOPAUSE CORRECTION FOR MSIS MODELS
  //  Root mean density
  //   DD - diffusive density
  //   DM - full mixed density
  //   ZHM - transition scale length
  //   XMM - full mixed molecular weight
  //   XM  - species molecular weight
  //   DNET - combined density
  const double a = zhm / (xmm - xm);
  if (!((dm > 0) && (dd2 > 0))) {
    fprintf(stderr, "[ERROR] dnet log error %e %e %e (traceback: %s)\n", dm,
            dd2, xm, __func__);
    if ((dd2 == 0) && (dm == 0))
      dd2 = 1;
    if (dm == 0)
      return dd2;
    if (dd2 == 0)
      return dm;
  }

  const double ylog = a * std::log(dm / dd2);
  if (ylog < -10e0) {
    return dd2;
  }
  if (ylog > 10e0) {
    return dm;
  }

  return dd2 * std::pow(1e0 + std::exp(ylog), 1e0 / a);
}

void splini(const double *xa, const double *ya, const double *y2a, int n,
            double x, double &y) noexcept {
  // INTEGRATE CUBIC SPLINE FUNCTION FROM XA(1) TO X
  //    XA,YA: ARRAYS OF TABULATED FUNCTION IN ASCENDING ORDER BY X
  //    Y2A: ARRAY OF SECOND DERIVATIVES
  //    N: SIZE OF ARRAYS XA,YA,Y2A
  //    X: ABSCISSA ENDPOINT FOR INTEGRATION
  //    Y: OUTPUT VALUE
  double yi = 0e0;
  int klo = 0;
  int khi = 1;
  double xx, h, a, b, a2, b2;
  while ((x > xa[klo]) && (khi < n)) {
    xx = x;
    if (khi < (n - 1)) {
      if (x < xa[khi])
        xx = x;
      else
        xx = xa[khi];
    }
    h = xa[khi] - xa[klo];
    a = (xa[khi] - xx) / h;
    b = (xx - xa[klo]) / h;
    a2 = a * a;
    b2 = b * b;
    yi += ((1e0 - a2) * ya[klo] / 2e0 + b2 * ya[khi] / 2e0 +
           ((-(1e0 + a2 * a2) / 4e0 + a2 / 2e0) * y2a[klo] +
            (b2 * b2 / 4e0 - b2 / 2e0) * y2a[khi]) *
               h * h / 6e0) *
          h;
    klo++;
    khi++;
  }
  y = yi;
}

void splint(const double *xa, const double *ya, const double *y2a, int n,
            double x, double &y) noexcept {
  // CALCULATE CUBIC SPLINE INTERP VALUE
  //  ADAPTED FROM NUMERICAL RECIPES BY PRESS ET AL.
  //  XA,YA: ARRAYS OF TABULATED FUNCTION IN ASCENDING ORDER BY X
  //  Y2A: ARRAY OF SECOND DERIVATIVES
  //  N: SIZE OF ARRAYS XA,YA,Y2A
  //  X: ABSCISSA FOR INTERPOLATION
  //  Y: OUTPUT VALUE
  int klo = 0;
  int khi = n - 1;
  int k;
  double h, a, b, yi;
  while ((khi - klo) > 1) {
    k = (khi + klo) / 2;
    if (xa[k] > x)
      khi = k;
    else
      klo = k;
  }
  h = xa[khi] - xa[klo];
  if (h == 0e0)
    fprintf(stderr, "[ERROR] bad XA input to splint (traceback: %s)\n",
            __func__);
  a = (xa[khi] - x) / h;
  b = (x - xa[klo]) / h;
  yi = a * ya[klo] + b * ya[khi] +
       ((a * a * a - a) * y2a[klo] + (b * b * b - b) * y2a[khi]) * h * h / 6.0;
  y = yi;
}

void spline(const double *x, const double *y, int n, double yp1, double ypn,
            double *y2) noexcept {
  // CALCULATE 2ND DERIVATIVES OF CUBIC SPLINE INTERP FUNCTION
  // ADAPTED FROM NUMERICAL RECIPES BY PRESS ET AL
  // X,Y: ARRAYS OF TABULATED FUNCTION IN ASCENDING ORDER BY X
  // N: SIZE OF ARRAYS X,Y
  // YP1,YPN: SPECIFIED DERIVATIVES AT X[0] AND X[N-1]; VALUES
  //          >= 1E30 SIGNAL SIGNAL SECOND DERIVATIVE ZERO
  // Y2: OUTPUT ARRAY OF SECOND DERIVATIVES
  #ifdef DEBUG
  assert(n < 6);
  #endif
  // double *u = new double[n];
  // u = malloc(sizeof(double) * (unsigned int)n);
  double u[6];
  double sig, p, qn, un;
  int i, k;
  if (yp1 > 0.99e30) {
    y2[0] = 0e0;
    u[0] = 0e0;
  } else {
    y2[0] = -0.5e0;
    u[0] = (3e0 / (x[1] - x[0])) * ((y[1] - y[0]) / (x[1] - x[0]) - yp1);
  }

  for (i = 1; i < (n - 1); i++) {
    sig = (x[i] - x[i - 1]) / (x[i + 1] - x[i - 1]);
    p = sig * y2[i - 1] + 2e0;
    y2[i] = (sig - 1e0) / p;
    u[i] = (6e0 *
                ((y[i + 1] - y[i]) / (x[i + 1] - x[i]) -
                 (y[i] - y[i - 1]) / (x[i] - x[i - 1])) /
                (x[i + 1] - x[i - 1]) -
            sig * u[i - 1]) /
           p;
  }

  if (ypn > 0.99e30) {
    qn = 0e0;
    un = 0e0;
  } else {
    qn = 0.5;
    un = (3e0 / (x[n - 1] - x[n - 2])) *
         (ypn - (y[n - 1] - y[n - 2]) / (x[n - 1] - x[n - 2]));
  }

  y2[n - 1] = (un - qn * u[n - 2]) / (qn * y2[n - 2] + 1e0);
  for (k = n - 2; k >= 0; k--) {
    y2[k] = y2[k] * y2[k + 1] + u[k];
  }

  //delete[] u;
}

inline double zeta(double zz, double zl) noexcept {
  return ((zz - zl) * (re + zl) / (re + zz));
}

double densm(double alt, double d0, double xm, double &tz, int mn3,
             const double *zn3, const double *tn3, const double *tgn3, int mn2,
             const double *zn2, const double *tn2, const double *tgn2) {
  // Calculate Temperature and Density Profiles for lower atmos.
  double xs[10], ys[10], y2out[10];
  constexpr double rgas = 831.4e0;
  double densm_tmp = d0;
  if (alt > zn2[0]) {
    if (xm == 0e0)
      return tz;
    else
      return d0;
  }

  // stratosphere/mesosphere temperature
  double z = (alt > zn2[mn2 - 1]) ? alt : zn2[mn2 - 1];
  int mn = mn2;
  double z1 = zn2[0];
  double z2 = zn2[mn - 1];
  double t1 = tn2[0];
  double t2 = tn2[mn - 1];
  double zg = zeta(z, z1);
  double zgdif = zeta(z2, z1);

  // set up spline nodes
  for (int k = 0; k < mn; k++) {
    xs[k] = zeta(zn2[k], z1) / zgdif;
    ys[k] = 1e0 / tn2[k];
  }
  double yd1 = -tgn2[0] / (t1 * t1) * zgdif;
  double yd2 =
      -tgn2[1] / (t2 * t2) * zgdif * (std::pow(((re + z2) / (re + z1)), 2e0));

  // calculate spline coefficients
  spline(xs, ys, mn, yd1, yd2, y2out);
  double x = zg / zgdif;
  double y;
  splint(xs, ys, y2out, mn, x, y);

  // temperature at altitude
  tz = 1e0 / y;
  if (xm != 0e0) {
    // calaculate stratosphere / mesospehere density
    const double glb = gsurf / (std::pow((1e0 + z1 / re), 2e0));
    const double gamm = xm * glb * zgdif / rgas;

    // Integrate temperature profile
    double yi;
    splini(xs, ys, y2out, mn, x, yi);
    double expl = gamm * yi;
    if (expl > 50e0)
      expl = 50e0;

    // Density at altitude
    densm_tmp = densm_tmp * (t1 / tz) * std::exp(-expl);
  }

  if (alt > zn3[0]) {
    if (xm == 0e0)
      return tz;
    else
      return densm_tmp;
  }

  // troposhere / stratosphere temperature
  z = alt;
  mn = mn3;
  z1 = zn3[0];
  z2 = zn3[mn - 1];
  t1 = tn3[0];
  t2 = tn3[mn - 1];
  zg = zeta(z, z1);
  zgdif = zeta(z2, z1);

  // set up spline nodes
  for (int k = 0; k < mn; k++) {
    xs[k] = zeta(zn3[k], z1) / zgdif;
    ys[k] = 1e0 / tn3[k];
  }
  yd1 = -tgn3[0] / (t1 * t1) * zgdif;
  yd2 = -tgn3[1] / (t2 * t2) * zgdif * (std::pow(((re + z2) / (re + z1)), 2e0));

  // calculate spline coefficients
  spline(xs, ys, mn, yd1, yd2, y2out);
  x = zg / zgdif;
  splint(xs, ys, y2out, mn, x, y);

  // temperature at altitude
  tz = 1e0 / y;
  if (xm != 0e0) {
    // calaculate tropospheric / stratosphere density
    double glb = gsurf / (std::pow((1e0 + z1 / re), 2e0));
    double gamm = xm * glb * zgdif / rgas;

    // Integrate temperature profile
    double yi;
    splini(xs, ys, y2out, mn, x, yi);
    double expl = gamm * yi;
    if (expl > 50e0)
      expl = 50e0;

    // Density at altitude
    densm_tmp = densm_tmp * (t1 / tz) * std::exp(-expl);
  }

  return (xm == 0e0) ? tz : densm_tmp;
}

double densu(double alt, double dlb, double tinf, double tlb, double xm,
             double alpha, double &tz, double zlb, double s2, int mn1,
             const double *zn1, double *tn1, double *tgn1) noexcept {
  // Calculate Temperature and Density Profiles for MSIS models
  // New lower thermo polynomial
  constexpr const double rgas = 831.4e0;
  int mn = 0;
  double xs[5], ys[5], y2out[5];

  // joining altitudes of Bates and spline
  double za = zn1[0];
  double z = (alt > za) ? alt : za;

  // geopotential altitude difference from ZLB
  double zg2 = zeta(z, zlb);

  // Bates temperature
  double tt = tinf - (tinf - tlb) * std::exp(-s2 * zg2);
  // double ta = tt;
  tz = tt;
  double densu_temp = tz;

  double x = 0;
  double t1 = 0e0, t2, z1 = 0e0, z2, zgdif = 0e0;
  if (alt < za) {
    // calculate temperature below ZA
    // temperature gradient at ZA from Bates profile
    double dta = (tinf - tt) * s2 * std::pow(((re + zlb) / (re + za)), 2e0);
    tgn1[0] = dta;
    tn1[0] = tt;
    z = (alt > zn1[mn1 - 1]) ? alt : zn1[mn1 - 1];
    mn = mn1;
    z1 = zn1[0];
    z2 = zn1[mn - 1];
    t1 = tn1[0];
    t2 = tn1[mn - 1];
    // geopotental difference from z1
    double zg = zeta(z, z1);
    zgdif = zeta(z2, z1);
    // set up spline nodes
    for (int k = 0; k < mn; k++) {
      xs[k] = zeta(zn1[k], z1) / zgdif;
      ys[k] = 1e0 / tn1[k];
    }
    // end node derivatives
    double yd1 = -tgn1[0] / (t1 * t1) * zgdif;
    double yd2 =
        -tgn1[1] / (t2 * t2) * zgdif * std::pow(((re + z2) / (re + z1)), 2e0);
    // calculate spline coefficients
    spline(xs, ys, mn, yd1, yd2, y2out);
    x = zg / zgdif;
    double y;
    splint(xs, ys, y2out, mn, x, y);
    // temperature at altitude
    tz = 1e0 / y;
    densu_temp = tz;
  }
  if (xm == 0) {
    return densu_temp;
  }

  // calculate density above za
  double glb = gsurf / std::pow((1e0 + zlb / re), 2e0);
  double gamma = xm * glb / (s2 * rgas * tinf);
  double expl = std::exp(-s2 * gamma * zg2);
  if (expl > 50e0)
    expl = 50e0;
  if (tt <= 0)
    expl = 50e0;

  // density at altitude
  double densa = dlb * std::pow((tlb / tt), ((1e0 + alpha + gamma))) * expl;
  densu_temp = densa;
  if (alt >= za) {
    return densu_temp;
  }

  // calculate density below za
  glb = gsurf / std::pow((1e0 + z1 / re), 2e0);
  double gamm = xm * glb * zgdif / rgas;

  // integrate spline temperatures
  double yi;
  splini(xs, ys, y2out, mn, x, yi);
  expl = gamm * yi;
  if (expl > 50e0)
    expl = 50e0;
  if (tz <= 0)
    expl = 50e0;

  // density at altitude
  densu_temp =
      densu_temp * std::pow((t1 / tz), (1e0 + alpha)) * std::exp(-expl);
  return densu_temp;
}

/// 3hr Magnetic activity functions
// Eq. A24d
inline double g0(double a, const double *p) noexcept {
  return (a - 4e0 +
          (p[25] - 1e0) * (a - 4e0 +
                           (std::exp(-sqrt(p[24] * p[24]) * (a - 4e0)) - 1e0) /
                               std::sqrt(p[24] * p[24])));
}

// Eq. A24c
inline double sumex(double ex) noexcept {
  return (1e0 + (1e0 - std::pow(ex, 19e0)) / (1e0 - ex) * std::pow(ex, 0.5e0));
}

// Eq. A24a
inline double sg0(double ex, const double *p, const double *ap) {
  return (g0(ap[1], p) + (g0(ap[2], p) * ex + g0(ap[3], p) * ex * ex +
                          g0(ap[4], p) * std::pow(ex, 3e0) +
                          (g0(ap[5], p) * std::pow(ex, 4e0) +
                           g0(ap[6], p) * std::pow(ex, 12e0)) *
                              (1e0 - std::pow(ex, 8e0)) / (1e0 - ex))) /
         sumex(ex);
}

double globe7(const double *p, int doy, double fsec, double glat, double glon,
              double lst, double f107, double f107A, const double *sw,
              const double *swc, double magnetic_index,
              const double *magnetic_array,
              dso::Mat2D<dso::MatrixStorageType::RowWise> &plg,
              trignums &trigs) noexcept {
  // calculate g(l) function
  // Upper Thermosphere Parameters
  double t[15] = {0};
  constexpr double sr = 7.2722e-5;
  constexpr double dgtr = 1.74533e-2;
  constexpr double dr = 1.72142e-2;
  constexpr double hr = 0.2618e0;

  double tloc = lst;

  // calculate legendre polynomials
  const double c = std::sin(glat * dgtr);
  const double s = std::cos(glat * dgtr);
  const double c2 = c * c;
  const double c4 = c2 * c2;
  const double s2 = s * s;

  // double plg[4][9];
  plg(0, 1) = c;
  plg(0, 2) = 0.5 * (3.0 * c2 - 1.0);
  plg(0, 3) = 0.5 * (5.0 * c * c2 - 3.0 * c);
  plg(0, 4) = (35.0 * c4 - 30.0 * c2 + 3.0) / 8.0;
  plg(0, 5) = (63.0 * c2 * c2 * c - 70.0 * c2 * c + 15.0 * c) / 8.0;
  plg(0, 6) = (11.0 * c * plg(0, 5) - 5.0 * plg(0, 4)) / 6.0;
  // plg(0,7) = (13.0*c*plg(0,6) - 6.0*plg(0,5))/7.0;
  plg(1, 1) = s;
  plg(1, 2) = 3.0 * c * s;
  plg(1, 3) = 1.5 * (5.0 * c2 - 1.0) * s;
  plg(1, 4) = 2.5 * (7.0 * c2 * c - 3.0 * c) * s;
  plg(1, 5) = 1.875 * (21.0 * c4 - 14.0 * c2 + 1.0) * s;
  plg(1, 6) = (11.0 * c * plg(1, 5) - 6.0 * plg(1, 4)) / 5.0;
  // plg(1,7) = (13.0*c*plg(1,6)-7.0*plg(1,5))/6.0;
  // plg(1,8) = (15.0*c*plg(1,7)-8.0*plg(1,6))/7.0;
  plg(2, 2) = 3.0 * s2;
  plg(2, 3) = 15.0 * s2 * c;
  plg(2, 4) = 7.5 * (7.0 * c2 - 1.0) * s2;
  plg(2, 5) = 3.0 * c * plg(2, 4) - 2.0 * plg(2, 3);
  plg(2, 6) = (11.0 * c * plg(2, 5) - 7.0 * plg(2, 4)) / 4.0;
  plg(2, 7) = (13.0 * c * plg(2, 6) - 8.0 * plg(2, 5)) / 5.0;
  plg(3, 3) = 15.0 * s2 * s;
  plg(3, 4) = 105.0 * s2 * s * c;
  plg(3, 5) = (9.0 * c * plg(3, 4) - 7. * plg(3, 3)) / 2.0;
  plg(3, 6) = (11.0 * c * plg(3, 5) - 8. * plg(3, 4)) / 3.0;

  if (!(((sw[7] == 0) && (sw[8] == 0)) && (sw[14] == 0))) {
    trigs.compute(hr, tloc);
  }

  const double cd32 = std::cos(dr * (doy - p[31]));
  const double cd18 = std::cos(2e0 * dr * (doy - p[17]));
  const double cd14 = std::cos(dr * (doy - p[13]));
  const double cd39 = std::cos(2e0 * dr * (doy - p[38]));

  // F10.7 EFFECT
  const double df = f107 - f107A;
  dfa = f107A - 150e0;
  t[0] = p[19] * df * (1e0 + p[59] * dfa) + p[20] * df * df + p[21] * dfa +
         p[29] * std::pow(dfa, 2e0);
  const double f1 = 1e0 + (p[47] * dfa + p[19] * df + p[20] * df * df) * swc[1];
  const double f2 = 1e0 + (p[49] * dfa + p[19] * df + p[20] * df * df) * swc[1];

  //  time independent
  t[1] = (p[1] * plg(0, 2) + p[2] * plg(0, 4) + p[22] * plg(0, 6)) +
         (p[14] * plg(0, 2)) * dfa * swc[1] + p[26] * plg(0, 1);

  //  symmetrical annual
  t[2] = p[18] * cd32;

  //  symmetrical semiannual
  t[3] = (p[15] + p[16] * plg(0, 2)) * cd18;

  //  asymmetrical annual
  t[4] = f1 * (p[9] * plg(0, 1) + p[10] * plg(0, 3)) * cd14;

  //  asymmetrical semiannual
  t[5] = p[37] * plg(0, 1) * cd39;

  // diurnal
  if (sw[7]) {
    const double t71 = (p[11] * plg(1, 2)) * cd14 * swc[5];
    const double t72 = (p[12] * plg(1, 2)) * cd14 * swc[5];
    t[6] =
        f2 * ((p[3] * plg(1, 1) + p[4] * plg(1, 3) + p[27] * plg(1, 5) + t71) *
                  trigs.ctloc() +
              (p[6] * plg(1, 1) + p[7] * plg(1, 3) + p[28] * plg(1, 5) + t72) *
                  trigs.stloc());
  }

  // semidiurnal
  if (sw[8]) {
    const double t81 = (p[23] * plg(2, 3) + p[35] * plg(2, 5)) * cd14 * swc[5];
    const double t82 = (p[33] * plg(2, 3) + p[36] * plg(2, 5)) * cd14 * swc[5];
    t[7] = f2 * ((p[5] * plg(2, 2) + p[41] * plg(2, 4) + t81) * trigs.c2tloc() +
                 (p[8] * plg(2, 2) + p[42] * plg(2, 4) + t82) * trigs.s2tloc());
  }

  // terdiurnal
  if (sw[14]) {
    t[13] = f2 * ((p[39] * plg(3, 3) +
                   (p[93] * plg(3, 4) + p[46] * plg(3, 6)) * cd14 * swc[5]) *
                      trigs.s3tloc() +
                  (p[40] * plg(3, 3) +
                   (p[94] * plg(3, 4) + p[48] * plg(3, 6)) * cd14 * swc[5]) *
                      trigs.c3tloc());
  }

  // magnetic activity based on daily ap
  if (sw[9] == -1) {
    if (p[51] != 0) {
      double exp1 = std::exp(-10800e0 * std::sqrt(p[51] * p[51]) /
                             (1e0 + p[138] * (45e0 - std::sqrt(glat * glat))));
      if (exp1 > 0.99999)
        exp1 = 0.99999;
      // if (p[24] < 1.0e-4)
      //   p[24] = 1.0e-4;
      apt[0] = sg0(exp1, p, magnetic_array);
      // apt[1]=sg2(exp1,p,ap->a);
      // apt[2]=sg0(exp2,p,ap->a);
      // apt[3]=sg2(exp2,p,ap->a);
      if (sw[9]) {
        t[8] = apt[0] *
               (p[50] + p[96] * plg(0, 2) + p[54] * plg(0, 4) +
                (p[125] * plg(0, 1) + p[126] * plg(0, 3) + p[127] * plg(0, 5)) *
                    cd14 * swc[5] +
                (p[128] * plg(1, 1) + p[129] * plg(1, 3) + p[130] * plg(1, 5)) *
                    swc[7] * std::cos(hr * (tloc - p[131])));
      }
    }
  } else {
    double apd = magnetic_index - 4e0;
    double p44 = p[43];
    double p45 = p[44];
    if (p44 < 0)
      p44 = 1.0e-5;
    apdf = apd + (p45 - 1.0) * (apd + (std::exp(-p44 * apd) - 1.0) / p44);
    if (sw[9]) {
      t[8] = apdf *
             (p[32] + p[45] * plg(0, 2) + p[34] * plg(0, 4) +
              (p[100] * plg(0, 1) + p[101] * plg(0, 3) + p[102] * plg(0, 5)) *
                  cd14 * swc[5] +
              (p[121] * plg(1, 1) + p[122] * plg(1, 3) + p[123] * plg(1, 5)) *
                  swc[7] * cos(hr * (tloc - p[124])));
    }
  }

  if ((sw[10]) && (glon > -1000e0)) {

    // longitudinal
    if (sw[11]) {
      t[10] =
          (1.0 + p[80] * dfa * swc[1]) *
          ((p[64] * plg(1, 2) + p[65] * plg(1, 4) + p[66] * plg(1, 6) +
            p[103] * plg(1, 1) + p[104] * plg(1, 3) + p[105] * plg(1, 5) +
            swc[5] *
                (p[109] * plg(1, 1) + p[110] * plg(1, 3) + p[111] * plg(1, 5)) *
                cd14) *
               std::cos(dgtr * glon) +
           (p[90] * plg(1, 2) + p[91] * plg(1, 4) + p[92] * plg(1, 6) +
            p[106] * plg(1, 1) + p[107] * plg(1, 3) + p[108] * plg(1, 5) +
            swc[5] *
                (p[112] * plg(1, 1) + p[113] * plg(1, 3) + p[114] * plg(1, 5)) *
                cd14) *
               std::sin(dgtr * glon));
    }

    // ut and mixed ut, longitude
    if (sw[12]) {
      t[11] = (1.0 + p[95] * plg(0, 1)) * (1.0 + p[81] * dfa * swc[1]) *
              (1.0 + p[119] * plg(0, 1) * swc[5] * cd14) *
              ((p[68] * plg(0, 1) + p[69] * plg(0, 3) + p[70] * plg(0, 5)) *
               std::cos(sr * (fsec - p[71])));
      t[11] += swc[11] *
               (p[76] * plg(2, 3) + p[77] * plg(2, 5) + p[78] * plg(2, 7)) *
               std::cos(sr * (fsec - p[79]) + 2.0 * dgtr * glon) *
               (1.0 + p[137] * dfa * swc[1]);
    }

    // ut, longitude magnetic activity
    if (sw[13]) {
      if (sw[9] == -1) {
        if (p[51]) {
          t[12] =
              apt[0] * swc[11] * (1. + p[132] * plg(0, 1)) *
                  ((p[52] * plg(1, 2) + p[98] * plg(1, 4) + p[67] * plg(1, 6)) *
                   std::cos(dgtr * (glon - p[97]))) +
              apt[0] * swc[11] * swc[5] *
                  (p[133] * plg(1, 1) + p[134] * plg(1, 3) +
                   p[135] * plg(1, 5)) *
                  cd14 * std::cos(dgtr * (glon - p[136])) +
              apt[0] * swc[12] *
                  (p[55] * plg(0, 1) + p[56] * plg(0, 3) + p[57] * plg(0, 5)) *
                  std::cos(sr * (fsec - p[58]));
        }
      } else {
        t[12] =
            apdf * swc[11] * (1.0 + p[120] * plg(0, 1)) *
                ((p[60] * plg(1, 2) + p[61] * plg(1, 4) + p[62] * plg(1, 6)) *
                 std::cos(dgtr * (glon - p[63]))) +
            apdf * swc[11] * swc[5] *
                (p[115] * plg(1, 1) + p[116] * plg(1, 3) + p[117] * plg(1, 5)) *
                cd14 * std::cos(dgtr * (glon - p[118])) +
            apdf * swc[12] *
                (p[83] * plg(0, 1) + p[84] * plg(0, 3) + p[85] * plg(0, 5)) *
                std::cos(sr * (fsec - p[75]));
      }
    }
  }

  // parms not used: 82, 89, 99, 139-149
  double tinf = p[30];
  for (int i = 0; i < 14; i++) {
    tinf += std::abs(sw[i + 1]) * t[i];
  }
  return tinf;
}

double glob7s(const double *p, int doy, double glon, const double *sw,
              const double *swc,
              const dso::Mat2D<dso::MatrixStorageType::RowWise> &plg,
              const trignums &trigs) noexcept {
  // version of globe for lower atmosphere 10/26/99
  double t[14] = {0};
  const double dr = 1.72142e-2;
  const double dgtr = 1.74533e-2;
// confirm parameter set
#ifdef DEBUG
  const double pset = 2.0;
  if (p[99] == 0 || p[99] != pset) {
    fprintf(stderr,
            "WARNING! Value of p[99] is %15.10f (should be %15.10f, traceback: "
            "%s)\n",
            p[99], pset, __func__);
  }
#endif
  const double cd32 = std::cos(dr * (doy - p[31]));
  const double cd18 = std::cos(2e0 * dr * (doy - p[17]));
  const double cd14 = std::cos(dr * (doy - p[13]));
  const double cd39 = std::cos(2e0 * dr * (doy - p[38]));

  // F10.7
  t[0] = p[21] * dfa;

  // time independent
  t[1] = p[1] * plg(0, 2) + p[2] * plg(0, 4) + p[22] * plg(0, 6) +
         p[26] * plg(0, 1) + p[14] * plg(0, 3) + p[59] * plg(0, 5);

  // symmetrical annual
  t[2] = (p[18] + p[47] * plg(0, 2) + p[29] * plg(0, 4)) * cd32;

  // symmetrical semiannual
  t[3] = (p[15] + p[16] * plg(0, 2) + p[30] * plg(0, 4)) * cd18;

  // asymmetrical annual
  t[4] = (p[9] * plg(0, 1) + p[10] * plg(0, 3) + p[20] * plg(0, 5)) * cd14;

  // asymmetrical semiannual
  t[5] = (p[37] * plg(0, 1)) * cd39;

  // diurnal
  if (sw[7]) {
    const double t71 = p[11] * plg(1, 2) * cd14 * swc[5];
    const double t72 = p[12] * plg(1, 2) * cd14 * swc[5];
    t[6] = ((p[3] * plg(1, 1) + p[4] * plg(1, 3) + t71) * trigs.ctloc() +
            (p[6] * plg(1, 1) + p[7] * plg(1, 3) + t72) * trigs.stloc());
  }

  // semidiurnal
  if (sw[8]) {
    const double t81 = (p[23] * plg(2, 3) + p[35] * plg(2, 5)) * cd14 * swc[5];
    const double t82 = (p[33] * plg(2, 3) + p[36] * plg(2, 5)) * cd14 * swc[5];
    t[7] = ((p[5] * plg(2, 2) + p[41] * plg(2, 4) + t81) * trigs.c2tloc() +
            (p[8] * plg(2, 2) + p[42] * plg(2, 4) + t82) * trigs.s2tloc());
  }

  // terdiurnal
  if (sw[14])
    t[13] =
        p[39] * plg(3, 3) * trigs.s3tloc() + p[40] * plg(3, 3) * trigs.c3tloc();

  // magnetic activity
  if (sw[9]) {
    if (sw[9] == 1)
      t[8] = apdf * (p[32] + p[45] * plg(0, 2) * swc[2]);
    if (sw[9] == -1)
      t[8] = (p[50] * apt[0] + p[96] * plg(0, 2) * apt[0] * swc[2]);
  }

  // longitudinal
  if (!((sw[10] == 0) || (sw[11] == 0) || (glon <= -1000.0))) {
    t[10] = (1e0 +
             plg(0, 1) * (p[80] * swc[5] * std::cos(dr * (doy - p[81])) +
                          p[85] * swc[6] * std::cos(2.0 * dr * (doy - p[86]))) +
             p[83] * swc[3] * std::cos(dr * (doy - p[84])) +
             p[87] * swc[4] * std::cos(2.0 * dr * (doy - p[88]))) *
            ((p[64] * plg(1, 2) + p[65] * plg(1, 4) + p[66] * plg(1, 6) +
              p[74] * plg(1, 1) + p[75] * plg(1, 3) + p[76] * plg(1, 5)) *
                 std::cos(dgtr * glon) +
             (p[90] * plg(1, 2) + p[91] * plg(1, 4) + p[92] * plg(1, 6) +
              p[77] * plg(1, 1) + p[78] * plg(1, 3) + p[79] * plg(1, 5)) *
                 std::sin(dgtr * glon));
  }
  double tt = 0e0;
  for (int i = 0; i < 14; i++)
    tt += abs(sw[i + 1]) * t[i];
  return tt;
}

void gts7(int doy, double fsec, double glat, double glon, double lst,
          double alt, double f107, double f107A, const double *sw,
          const double *swc, double magnetic_index,
          const double *magnetic_array,
          dso::Mat2D<dso::MatrixStorageType::RowWise> &plg, trignums &trigs,
          double *outd, double *outt) noexcept {
  // Thermospheric portion of NRLMSISE-00
  // See GTD7 for more extensive comments
  // alt > 72.5 km!
  double zn1[5] = {120.0, 110.0, 100.0, 90.0, 72.5};
  const int mn1 = 5;
  const double dgtr = 1.74533E-2;
  const double dr = 1.72142E-2;
  const double alpha[9] = {-0.38, 0.0, 0.0, 0.0, 0.17, 0.0, -0.38, 0.0, 0.0};
  const double altl[8] = {200.0, 300.0, 160.0, 250.0,
                          240.0, 450.0, 320.0, 450.0};
  const double za = pdl[1][15];
  zn1[0] = za;
  for (int j = 0; j < 9; j++)
    outd[j] = 0;

  // tinf variations not important below za or zn1(1)
  double tinf;
  if (alt > zn1[0])
    tinf = ptm[0] * pt[0] *
           (1e0 + sw[16] * globe7(pt, doy, fsec, glat, glon, lst, f107, f107A,
                                  sw, swc, magnetic_index, magnetic_array, plg,
                                  trigs));
  else
    tinf = ptm[0] * pt[0];
  outt[0] = tinf;

  //  gradient variations not important below zn1(5)
  double g0;
  if (alt > zn1[4])
    g0 = ptm[3] * ps[0] *
         (1e0 + sw[19] * globe7(ps, doy, fsec, glat, glon, lst, f107, f107A, sw,
                                swc, magnetic_index, magnetic_array, plg,
                                trigs));
  else
    g0 = ptm[3] * ps[0];
  double tlb =
      ptm[1] *
      (1e0 + sw[17] * globe7(pd[3], doy, fsec, glat, glon, lst, f107, f107A, sw,
                             swc, magnetic_index, magnetic_array, plg, trigs)) *
      pd[3][0];
  double s = g0 / (tinf - tlb);

  // Lower thermosphere temp variations not significant for
  // density above 300 km
  const double indoy = doy;
  const double inlon = glon;
  if (alt < 300e0) {
    meso_tn1[1] =
        ptm[6] * ptl[0][0] /
        (1e0 - sw[18] * glob7s(ptl[0], indoy, inlon, sw, swc, plg, trigs));
    meso_tn1[2] =
        ptm[2] * ptl[1][0] /
        (1e0 - sw[18] * glob7s(ptl[1], indoy, inlon, sw, swc, plg, trigs));
    meso_tn1[3] =
        ptm[7] * ptl[2][0] /
        (1e0 - sw[18] * glob7s(ptl[2], indoy, inlon, sw, swc, plg, trigs));
    meso_tn1[4] = ptm[4] * ptl[3][0] /
                  (1e0 - sw[18] * sw[20] *
                             glob7s(ptl[3], indoy, inlon, sw, swc, plg, trigs));
    meso_tgn1[1] =
        ptm[8] * pma[8][0] *
        (1e0 +
         sw[18] * sw[20] * glob7s(pma[8], indoy, inlon, sw, swc, plg, trigs)) *
        meso_tn1[4] * meso_tn1[4] / (std::pow((ptm[4] * ptl[3][0]), 2e0));
  } else {
    meso_tn1[1] = ptm[6] * ptl[0][0];
    meso_tn1[2] = ptm[2] * ptl[1][0];
    meso_tn1[3] = ptm[7] * ptl[2][0];
    meso_tn1[4] = ptm[4] * ptl[3][0];
    meso_tgn1[1] = ptm[8] * pma[8][0] * meso_tn1[4] * meso_tn1[4] /
                   (std::pow((ptm[4] * ptl[3][0]), 2.0));
  }

  // N2 variation factor at Zlb
  double g28 =
      sw[21] * globe7(pd[2], doy, fsec, glat, glon, lst, f107, f107A, sw, swc,
                      magnetic_index, magnetic_array, plg, trigs);

  // variation of turbopause height
  double zhf = pdl[1][24] * (1e0 + sw[5] * pdl[0][24] * std::sin(dgtr * glat) *
                                       std::cos(dr * (doy - pt[13])));
  outt[0] = tinf;
  double xmm = pdm[2][4];
  double z = alt;

  // N2 density
  // --------------------------------------------------------------------------
  // Diffusive density at Zlb
  double db28 = pdm[2][0] * std::exp(g28) * pd[2][0];
  // Diffusive density at Alt
  outd[2] = densu(z, db28, tinf, tlb, 28e0, alpha[2], outt[1], ptm[5], s, mn1,
                  zn1, meso_tn1, meso_tgn1);
  // Turbopause
  double zh28 = pdm[2][2] * zhf;
  double zhm28 = pdm[2][3] * pdl[1][5];
  double xmd = 28e0 - xmm;
  // Mixed density at Zlb
  double tz;
  const double b28 = densu(zh28, db28, tinf, tlb, xmd, (alpha[2] - 1e0), tz,
                           ptm[5], s, mn1, zn1, meso_tn1, meso_tgn1);
  if ((sw[15]) && (z <= altl[2])) {
    //  Mixed density at Alt
    dm28 = densu(z, b28, tinf, tlb, xmm, alpha[2], tz, ptm[5], s, mn1, zn1,
                 meso_tn1, meso_tgn1);
    //  Net density at Alt
    outd[2] = dnet(outd[2], dm28, zhm28, xmm, 28e0);
  }

  // HE density
  // --------------------------------------------------------------------------
  // Density variation factor at Zlb
  double g4 =
      sw[21] * globe7(pd[0], doy, fsec, glat, glon, lst, f107, f107A, sw, swc,
                      magnetic_index, magnetic_array, plg, trigs);
  //  Diffusive density at Zlb
  double db04 = pdm[0][0] * std::exp(g4) * pd[0][0];
  //  Diffusive density at Alt
  outd[0] = densu(z, db04, tinf, tlb, 4e0, alpha[0], outt[1], ptm[5], s, mn1,
                  zn1, meso_tn1, meso_tgn1);
  // dd = outd[0];
  if ((sw[15]) && (z < altl[0])) {
    //  Turbopause
    const double zh04 = pdm[0][2];
    //  Mixed density at Zlb
    const double b04 = densu(zh04, db04, tinf, tlb, 4e0 - xmm, alpha[0] - 1e0,
                             outt[1], ptm[5], s, mn1, zn1, meso_tn1, meso_tgn1);
    //  Mixed density at Alt
    /*static*/ dm04 = densu(z, b04, tinf, tlb, xmm, 0e0, outt[1], ptm[5], s,
                            mn1, zn1, meso_tn1, meso_tgn1);
    const double zhm04 = zhm28;
    //  Net density at Alt
    outd[0] = dnet(outd[0], dm04, zhm04, xmm, 4e0);
    //  Correction to specified mixing ratio at ground
    const double rl = std::log(b28 * pdm[0][1] / b04);
    const double zc04 = pdm[0][4] * pdl[1][0];
    const double hc04 = pdm[0][5] * pdl[1][1];
    //  Net density corrected at Alt
    outd[0] *= ccor(z, rl, hc04, zc04);
  }

  // O density
  // --------------------------------------------------------------------------
  // Density variation factor at Zlb
  const double g16 =
      sw[21] * globe7(pd[1], doy, fsec, glat, glon, lst, f107, f107A, sw, swc,
                      magnetic_index, magnetic_array, plg, trigs);
  // Diffusive density at Zlb
  const double db16 = pdm[1][0] * std::exp(g16) * pd[1][0];
  // Diffusive density at Alt
  outd[1] = densu(z, db16, tinf, tlb, 16e0, alpha[1], outt[1], ptm[5], s, mn1,
                  zn1, meso_tn1, meso_tgn1);
  // dd = outd[1];
  if ((sw[15]) && (z <= altl[1])) {
    // Turbopause
    const double zh16 = pdm[1][2];
    // Mixed density at Zlb
    const double b16 =
        densu(zh16, db16, tinf, tlb, 16e0 - xmm, (alpha[1] - 1e0), outt[1],
              ptm[5], s, mn1, zn1, meso_tn1, meso_tgn1);
    // Mixed density at Alt
    /*static*/ dm16 = densu(z, b16, tinf, tlb, xmm, 0e0, outt[1], ptm[5], s,
                            mn1, zn1, meso_tn1, meso_tgn1);
    double zhm16 = zhm28;
    // Net density at Alt
    outd[1] = dnet(outd[1], dm16, zhm16, xmm, 16e0);
    const double rl =
        pdm[1][1] * pdl[1][16] * (1e0 + sw[1] * pdl[0][23] * (f107A - 150e0));
    const double hc16 = pdm[1][5] * pdl[1][3];
    const double zc16 = pdm[1][4] * pdl[1][2];
    const double hc216 = pdm[1][5] * pdl[1][4];
    outd[1] = outd[1] * ccor2(z, rl, hc16, zc16, hc216);
    // Chemistry correction
    const double hcc16 = pdm[1][7] * pdl[1][13];
    const double zcc16 = pdm[1][6] * pdl[1][12];
    const double rc16 = pdm[1][3] * pdl[1][14];
    // Net density corrected at Alt
    outd[1] *= ccor(z, rc16, hcc16, zcc16);
  }

  // O2 density
  // --------------------------------------------------------------------------
  // Density variation factor at Zlb
  const double g32 =
      sw[21] * globe7(pd[4], doy, fsec, glat, glon, lst, f107, f107A, sw, swc,
                      magnetic_index, magnetic_array, plg, trigs);
  //  Diffusive density at Zlb
  const double db32 = pdm[3][0] * std::exp(g32) * pd[4][0];
  //   Diffusive density at Alt
  outd[3] = densu(z, db32, tinf, tlb, 32e0, alpha[3], outt[1], ptm[5], s, mn1,
                  zn1, meso_tn1, meso_tgn1);
  if (sw[15]) {
    if (z <= altl[3]) {
      //   Turbopause
      const double zh32 = pdm[3][2];
      //  Mixed density at Zlb
      const double b32 =
          densu(zh32, db32, tinf, tlb, 32e0 - xmm, alpha[3] - 1e0, outt[1],
                ptm[5], s, mn1, zn1, meso_tn1, meso_tgn1);
      //  Mixed density at Alt
      /*static*/ dm32 = densu(z, b32, tinf, tlb, xmm, 0e0, outt[1], ptm[5], s,
                              mn1, zn1, meso_tn1, meso_tgn1);
      const double zhm32 = zhm28;
      //  Net density at Alt
      outd[3] = dnet(outd[3], dm32, zhm32, xmm, 32e0);
      //   Correction to specified mixing ratio at ground
      const double rl = std::log(b28 * pdm[3][1] / b32);
      const double hc32 = pdm[3][5] * pdl[1][7];
      const double zc32 = pdm[3][4] * pdl[1][6];
      outd[3] *= ccor(z, rl, hc32, zc32);
    }
    // Correction for general departure from diffusive equilibrium above Zlb
    const double hcc32 = pdm[3][7] * pdl[1][22];
    const double hcc232 = pdm[3][7] * pdl[0][22];
    const double zcc32 = pdm[3][6] * pdl[1][21];
    const double rc32 =
        pdm[3][3] * pdl[1][23] * (1e0 + sw[1] * pdl[0][23] * (f107A - 150e0));
    // Net density corrected at Alt
    outd[3] *= ccor2(z, rc32, hcc32, zcc32, hcc232);
  }

  // AR density
  // --------------------------------------------------------------------------
  // Density variation factor at Zlb
  const double g40 =
      sw[21] * globe7(pd[5], doy, fsec, glat, glon, lst, f107, f107A, sw, swc,
                      magnetic_index, magnetic_array, plg, trigs);
  //  Diffusive density at Zlb
  const double db40 = pdm[4][0] * std::exp(g40) * pd[5][0];
  //   Diffusive density at Alt
  outd[4] = densu(z, db40, tinf, tlb, 40e0, alpha[4], outt[1], ptm[5], s, mn1,
                  zn1, meso_tn1, meso_tgn1);
  if ((sw[15]) && (z <= altl[4])) {
    //   Turbopause
    const double zh40 = pdm[4][2];
    //  Mixed density at Zlb
    const double b40 = densu(zh40, db40, tinf, tlb, 40e0 - xmm, alpha[4] - 1e0,
                             outt[1], ptm[5], s, mn1, zn1, meso_tn1, meso_tgn1);
    //  Mixed density at Alt
    /*static*/ dm40 = densu(z, b40, tinf, tlb, xmm, 0e0, outt[1], ptm[5], s,
                            mn1, zn1, meso_tn1, meso_tgn1);
    const double zhm40 = zhm28;
    //  Net density at Alt
    outd[4] = dnet(outd[4], dm40, zhm40, xmm, 40.);
    //   Correction to specified mixing ratio at ground
    const double rl = std::log(b28 * pdm[4][1] / b40);
    const double hc40 = pdm[4][5] * pdl[1][9];
    const double zc40 = pdm[4][4] * pdl[1][8];
    //  Net density corrected at Alt
    outd[4] = outd[4] * ccor(z, rl, hc40, zc40);
  }

  // hydrogen density
  // --------------------------------------------------------------------------
  // Density variation factor at Zlb
  const double g1 =
      sw[21] * globe7(pd[6], doy, fsec, glat, glon, lst, f107, f107A, sw, swc,
                      magnetic_index, magnetic_array, plg, trigs);
  //  Diffusive density at Zlb
  const double db01 = pdm[5][0] * std::exp(g1) * pd[6][0];
  //   Diffusive density at Alt
  outd[6] = densu(z, db01, tinf, tlb, 1e0, alpha[6], outt[1], ptm[5], s, mn1,
                  zn1, meso_tn1, meso_tgn1);
  // dd = outd[6];
  if ((sw[15]) && (z <= altl[6])) {
    //   Turbopause
    const double zh01 = pdm[5][2];
    //  Mixed density at Zlb
    const double b01 = densu(zh01, db01, tinf, tlb, 1e0 - xmm, alpha[6] - 1e0,
                             outt[1], ptm[5], s, mn1, zn1, meso_tn1, meso_tgn1);
    //  Mixed density at Alt
    /*static*/ dm01 = densu(z, b01, tinf, tlb, xmm, 0e0, outt[1], ptm[5], s,
                            mn1, zn1, meso_tn1, meso_tgn1);
    const double zhm01 = zhm28;
    //  Net density at Alt
    outd[6] = dnet(outd[6], dm01, zhm01, xmm, 1e0);
    //   Correction to specified mixing ratio at ground
    const double rl =
        std::log(b28 * pdm[5][1] * std::sqrt(pdl[1][17] * pdl[1][17]) / b01);
    const double hc01 = pdm[5][5] * pdl[1][11];
    const double zc01 = pdm[5][4] * pdl[1][10];
    outd[6] *= ccor(z, rl, hc01, zc01);
    //   Chemistry correction
    const double hcc01 = pdm[5][7] * pdl[1][19];
    const double zcc01 = pdm[5][6] * pdl[1][18];
    const double rc01 = pdm[5][3] * pdl[1][20];
    //  Net density corrected at Alt
    outd[6] *= ccor(z, rc01, hcc01, zcc01);
  }

  // atomic nitrogen density
  // --------------------------------------------------------------------------
  // Density variation factor at Zlb
  const double g14 =
      sw[21] * globe7(pd[7], doy, fsec, glat, glon, lst, f107, f107A, sw, swc,
                      magnetic_index, magnetic_array, plg, trigs);
  //  Diffusive density at Zlb
  const double db14 = pdm[6][0] * std::exp(g14) * pd[7][0];
  //   Diffusive density at Alt
  outd[7] = densu(z, db14, tinf, tlb, 14e0, alpha[7], outt[1], ptm[5], s, mn1,
                  zn1, meso_tn1, meso_tgn1);
  if ((sw[15]) && (z <= altl[7])) {
    //   Turbopause
    const double zh14 = pdm[6][2];
    //  Mixed density at Zlb
    const double b14 = densu(zh14, db14, tinf, tlb, 14e0 - xmm, alpha[7] - 1e0,
                             outt[1], ptm[5], s, mn1, zn1, meso_tn1, meso_tgn1);
    //  Mixed density at Alt
    /*static*/ dm14 = densu(z, b14, tinf, tlb, xmm, 0e0, outt[1], ptm[5], s,
                            mn1, zn1, meso_tn1, meso_tgn1);
    const double zhm14 = zhm28;
    //  Net density at Alt
    outd[7] = dnet(outd[7], dm14, zhm14, xmm, 14e0);
    //   Correction to specified mixing ratio at ground
    const double rl =
        std::log(b28 * pdm[6][1] * std::sqrt(pdl[0][2] * pdl[0][2]) / b14);
    const double hc14 = pdm[6][5] * pdl[0][1];
    const double zc14 = pdm[6][4] * pdl[0][0];
    outd[7] *= ccor(z, rl, hc14, zc14);
    //   Chemistry correction
    const double hcc14 = pdm[6][7] * pdl[0][4];
    const double zcc14 = pdm[6][6] * pdl[0][3];
    const double rc14 = pdm[6][3] * pdl[0][5];
    //  Net density corrected at Alt
    outd[7] *= ccor(z, rc14, hcc14, zcc14);
  }

  // Anomalous oxygen density
  // --------------------------------------------------------------------------
  const double g16h =
      sw[21] * globe7(pd[8], doy, fsec, glat, glon, lst, f107, f107A, sw, swc,
                      magnetic_index, magnetic_array, plg, trigs);
  const double db16h = pdm[7][0] * std::exp(g16h) * pd[8][0];
  const double tho = pdm[7][9] * pdl[0][6];
  dd = densu(z, db16h, tho, tho, 16e0, alpha[8], outt[1], ptm[5], s, mn1, zn1,
             meso_tn1, meso_tgn1);
  const double zsht = pdm[7][5];
  const double zmho = pdm[7][4];
  const double zsho = scalh(zmho, 16e0, tho);
  outd[8] = dd * std::exp(-zsht / zsho * (std::exp(-(z - zmho) / zsht) - 1e0));

  // total mass density
  outd[5] =
      1.66e-24 * (4e0 * outd[0] + 16e0 * outd[1] + 28e0 * outd[2] +
                  32e0 * outd[3] + 40e0 * outd[4] + outd[6] + 14e0 * outd[7]);

  // temperature
  z = std::sqrt(alt * alt);
  /*double ddum = */ densu(z, 1e0, tinf, tlb, 0e0, 0e0, outt[1], ptm[5], s, mn1,
                           zn1, meso_tn1, meso_tgn1);
  if (sw[0]) {
    for (int i = 0; i < 9; i++)
      outd[i] *= 1e6;
    outd[5] = outd[5] / 1000;
  }
}

void dso::air_density_models::nrlmsise00::gtd7(
    const int *switches, int doy, double fsec, double glat, double glon,
    double lst, double f107, double f107A, double alt, double magnetic_index,
    const double *magnetic_array, double *outd, double *outt) noexcept {
  const int mn3 = 5;
  const double zn3[5] = {32.5, 20.0, 15.0, 10.0, 0.0};
  const int mn2 = 4;
  const double zn2[4] = {72.5, 55.0, 45.0, 32.5};
  const double zmix = 62.5;

  double sw[24];
  double swc[24];
  tselec(switches, sw, swc);

  // Latitude variation of gravity (none for sw[2]=0)
  double xlat = glat * (sw[2] != 0e0) + 45e0 * (sw[2] == 0);

  // assigns gsur and re
  glatf(xlat, gsurf, re);

  const double xmm = pdm[2][4];

  // thermosphere / mesosphere (above zn2[0])
  double altt = (alt > zn2[0]) ? alt : zn2[0];

  dso::Mat2D<dso::MatrixStorageType::RowWise> plg(8, 8);
  trignums trigs;
  gts7(doy, fsec, glat, glon, lst, altt, f107, f107A, sw, swc, magnetic_index,
       magnetic_array, plg, trigs, outd, outt);

  double dm28m = dm28;
  if (sw[0]) // metric adjustment
    dm28m = dm28 * 1e6;

  if (alt >= zn2[0])
    return;

  // Lower mesosphere/upper stratosphere (between zn3[0] and zn2[0])
  // Temperature at nodes and gradients at end nodes
  // Inverse temperature a linear function of spherical harmonics
  meso_tgn2[0] = meso_tgn1[1];
  meso_tn2[0] = meso_tn1[4];
  meso_tn2[1] = pma[0][0] * pavgm[0] /
                (1.0 - sw[20] * glob7s(pma[0], doy, glon, sw, swc, plg, trigs));
  meso_tn2[2] = pma[1][0] * pavgm[1] /
                (1.0 - sw[20] * glob7s(pma[1], doy, glon, sw, swc, plg, trigs));
  meso_tn2[3] =
      pma[2][0] * pavgm[2] /
      (1.0 - sw[20] * sw[22] * glob7s(pma[2], doy, glon, sw, swc, plg, trigs));
  meso_tgn2[1] =
      pavgm[8] * pma[9][0] *
      (1.0 + sw[20] * sw[22] * glob7s(pma[9], doy, glon, sw, swc, plg, trigs)) *
      meso_tn2[3] * meso_tn2[3] / (std::pow((pma[2][0] * pavgm[2]), 2.0));
  meso_tn3[0] = meso_tn2[3];

  if (alt <= zn3[0]) {
    // Lower stratosphere and troposphere (below zn3[0])
    // Temperature at nodes and gradients at end nodes
    // Inverse temperature a linear function of spherical harmonics
    meso_tgn3[0] = meso_tgn2[1];
    meso_tn3[1] =
        pma[3][0] * pavgm[3] /
        (1e0 - sw[22] * glob7s(pma[3], doy, glon, sw, swc, plg, trigs));
    meso_tn3[2] =
        pma[4][0] * pavgm[4] /
        (1e0 - sw[22] * glob7s(pma[4], doy, glon, sw, swc, plg, trigs));
    meso_tn3[3] =
        pma[5][0] * pavgm[5] /
        (1e0 - sw[22] * glob7s(pma[5], doy, glon, sw, swc, plg, trigs));
    meso_tn3[4] =
        pma[6][0] * pavgm[6] /
        (1e0 - sw[22] * glob7s(pma[6], doy, glon, sw, swc, plg, trigs));
    meso_tgn3[1] =
        pma[7][0] * pavgm[7] *
        (1e0 + sw[22] * glob7s(pma[7], doy, glon, sw, swc, plg, trigs)) *
        meso_tn3[4] * meso_tn3[4] / (std::pow((pma[6][0] * pavgm[6]), 2.0));
  }

  // linear transition to full mixing below zn2[0]
  double dmc = 0;
  if (alt > zmix)
    dmc = 1e0 - (zn2[0] - alt) / (zn2[0] - zmix);
  const double dz28 = outd[2];

  // N2 density
  double dmr = outd[2] / dm28m - 1e0;
  double tz;
  outd[2] = densm(alt, dm28m, xmm, tz, mn3, zn3, meso_tn3, meso_tgn3, mn2, zn2,
                  meso_tn2, meso_tgn2);
  outd[2] *= (1e0 + dmr * dmc);

  // HE density
  dmr = outd[0] / (dz28 * pdm[0][1]) - 1e0;
  outd[0] = outd[2] * (pdm[0][1] * (1e0 + dmr * dmc));

  // O density
  outd[1] = 0e0;
  outd[8] = 0e0;

  // O2 density
  dmr = outd[3] / (dz28 * pdm[3][1]) - 1e0;
  outd[3] = outd[2] * pdm[3][1] * (1e0 + dmr * dmc);

  // AR density
  dmr = outd[4] / (dz28 * pdm[4][1]) - 1e0;
  outd[4] = outd[2] * pdm[4][1] * (1e0 + dmr * dmc);

  // Hydrogen density
  outd[6] = 0e0;

  // Atomic nitrogen density
  outd[7] = 0e0;

  // Total mass density
  outd[5] =
      1.66e-24 * (4e0 * outd[0] + 16e0 * outd[1] + 28e0 * outd[2] +
                  32e0 * outd[3] + 40e0 * outd[4] + outd[6] + 14e0 * outd[7]);

  if (sw[0])
    outd[5] *= 1e-3;

  // temperature at altitude
  dd = densm(alt, 1e0, 0e0, tz, mn3, zn3, meso_tn3, meso_tgn3, mn2, zn2,
             meso_tn2, meso_tgn2);
  outt[1] = tz;
}
