#include "atmosphere.hpp"
#include "compact2dmat.hpp"
#include <cmath>
#include <cstdio>

using dso::MatrixStorageType;

struct trignums {
  double trigs[6];
  void compute(double hr, double tloc) noexcept {
    trigs[0] = std::sin(hr * tloc);
    trigs[1] = std::cos(hr * tloc);
    trigs[2] = std::sin(2e0 * hr * tloc);
    trigs[3] = std::cos(2e0 * hr * tloc);
    trigs[4] = std::sin(3e0 * hr * tloc);
    trigs[5] = std::cos(3e0 * hr * tloc);
  }
  double &stloc() noexcept { return trigs[0]; }
  double &ctloc() noexcept { return trigs[1]; }
  double &s2tloc() noexcept { return trigs[2]; }
  double &c2tloc() noexcept { return trigs[3]; }
  double &s3tloc() noexcept { return trigs[4]; }
  double &c3tloc() noexcept { return trigs[5]; }
  const double &stloc() const noexcept { return trigs[0]; }
  const double &ctloc() const noexcept { return trigs[1]; }
  const double &s2tloc() const noexcept { return trigs[2]; }
  const double &c2tloc() const noexcept { return trigs[3]; }
  const double &s3tloc() const noexcept { return trigs[4]; }
  const double &c3tloc() const noexcept { return trigs[5]; }
}; // trignums

const double gsurf = 980.665e0;
const double re = 6356.77e0;

const double pt[] = {
    // pt1
    0.996040e+00, 0.385528e-01, 0.303445e-02, -0.105531e+00, -0.607134e-02,
    -0.516278e-03, -0.115622e+00, 0.202240e-02, 0.990156e-02, -0.127371e+00,
    -0.302449e-01, 0.123512e-01, -0.526277e-02, -0.845398e+01, 0.000000e+00,
    0.142370e-01, 0.000000e+00, 0.125818e+03, 0.805486e-02, 0.164419e-02,
    -0.621452e-05, 0.311701e-02, 0.000000e+00, 0.386578e-02, 0.132397e+00,
    0.213315e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, -0.641110e-05,
    0.000000e+00, 0.300150e+02, 0.533297e-02, 0.389146e-02, 0.204725e-02,
    0.000000e+00, 0.000000e+00, -0.192645e-01, 0.275905e+01, 0.147284e-02,
    0.341345e-03, -0.117388e-02, -0.354589e-03, 0.113139e+00, 0.169134e+00,
    0.508295e-02, 0.365016e-04, 0.426385e-02, 0.115102e-03, 0.511819e-02,
    //  pt2
    0.609108e-02, 0.404995e-04, 0.153049e-02, 0.241470e-04, 0.230764e-02,
    0.155267e-02, 0.133722e-02, -0.182318e-02, -0.263007e+03, 0.000000e+00,
    0.137337e-02, 0.995774e-03, 0.000000e+00, -0.108983e+03, 0.562606e-02,
    0.594053e-02, 0.109358e-02, 0.000000e+00, -0.133410e-01, -0.243409e-01,
    -0.135688e-01, 0.311370e+05, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    -0.283023e+04, 0.845583e-03, 0.538706e-03, 0.000000e+00, 0.247956e+03,
    0.292246e-02, 0.000000e+00, 0.000000e+00, 0.747703e-04, 0.887993e-03,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    -0.116540e-01, -0.449173e-02, -0.353189e-03, -0.173933e-03, -0.153218e-03,
    -0.565411e+00, 0.777272e-02, -0.911784e+02, 0.645187e-03, 0.000000e+00,
    // pt3
    -0.837685e-03, 0.242318e-02, 0.473796e-02, -0.301801e-02, -0.423564e-02,
    -0.248289e-02, 0.919286e-03, 0.216372e-02, 0.863968e-03, 0.189689e-02,
    0.415654e-02, 0.000000e+00, 0.118068e-01, 0.331190e-02, 0.000000e+00,
    0.120222e-02, 0.000000e+00, 0.000000e+00, -0.307246e+01, 0.000000e+00,
    0.000000e+00, 0.672403e-03, 0.108930e-02, 0.972278e-03, 0.468242e+01,
    -0.315034e-03, 0.400059e-02, 0.515036e-02, 0.162989e-02, 0.108824e-02,
    0.995261e-03, 0.418955e+01, -0.364059e+00, 0.170182e-02, 0.000000e+00,
    0.000000e+00, -0.320120e+01, 0.000000e+00, 0.580206e-02, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00};
const double pd[][50] = {
    // pa1[50] =
    {0.104934e+01,  -0.288362e-01, -0.207095e+00, -0.103314e+00, -0.702373e-02,
     0.129664e-01,  0.408853e+00,  -0.919895e-02, -0.188660e-01, 0.140927e+01,
     0.175033e+00,  0.187351e-01,  0.110979e+00,  -0.742871e+01, 0.000000e+00,
     0.267143e+00,  -0.595979e-01, 0.105038e+03,  -0.840963e-01, -0.697632e-03,
     0.206521e-05,  0.765306e-03,  0.000000e+00,  0.000000e+00,  0.126762e+00,
     0.128876e+00,  -0.504479e-01, -0.130735e-01, -0.224348e-01, 0.000000e+00,
     0.000000e+00,  -0.150832e+03, -0.629928e-02, 0.000000e+00,  -0.407760e-02,
     0.000000e+00,  0.000000e+00,  0.525725e-01,  -0.311486e+02, -0.313351e-02,
     0.275838e-02,  0.000000e+00,  0.000000e+00,  0.111247e+00,  0.108815e+00,
     -0.466713e-01, 0.000000e+00,  -0.329329e-02, 0.000000e+00,  0.167838e-02},
    // pa2[50] =
    {-0.916691e-02, 0.345044e-04,  -0.971806e-02, 0.000000e+00,  -0.204672e-02,
     -0.786899e-02, -0.798285e-02, 0.536515e-02,  -0.531172e+04, 0.000000e+00,
     -0.642781e-02, -0.171690e-02, 0.000000e+00,  -0.679131e+02, -0.179912e-01,
     -0.158305e-01, -0.712313e-02, 0.000000e+00,  0.253477e-01,  0.852960e-01,
     0.102163e+00,  0.295009e+05,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     -0.684625e+04, -0.619098e-02, -0.269289e-02, 0.000000e+00,  -0.520231e+03,
     -0.633463e-02, 0.000000e+00,  0.000000e+00,  -0.602428e-02, -0.407077e-02,
     0.542264e-02,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.407560e-01,  0.282288e-01,  0.908088e-02,  0.000000e+00,  0.000000e+00,
     -0.405204e+00, -0.597931e-01, -0.731823e+02, -0.206620e-02, 0.000000e+00},
    // pa3[50] =
    {-0.372723e-02, -0.188146e-01, -0.101794e-01, 0.804633e-02,  0.101090e-01,
     0.873253e-02,  0.238268e-01,  0.480444e-02,  0.171088e-02,  0.396369e-01,
     -0.213809e-01, 0.000000e+00,  -0.102588e+00, -0.591702e-02, 0.000000e+00,
     0.270923e-02,  0.000000e+00,  0.000000e+00,  -0.175043e+03, 0.603489e+00,
     -0.617589e+00, 0.838098e-02,  0.183871e-02,  -0.705329e-03, -0.406644e+01,
     -0.509347e-02, -0.284344e-01, -0.124160e-01, 0.133665e-01,  0.393410e-02,
     -0.503723e-03, -0.457683e+01, -0.529542e+00, -0.425812e-02, 0.000000e+00,
     0.000000e+00,  0.191541e+02,  0.000000e+00,  0.323247e-02,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00},
    // pb1[50] =
    {0.931113e+00,  -0.138721e+00, -0.133457e+00, -0.529542e-01, -0.444983e-02,
     0.135264e-01,  0.598075e-01,  -0.362880e-01, -0.312798e-01, 0.372068e+00,
     0.295974e-01,  0.120509e-01,  0.521995e-01,  -0.778888e+01, 0.000000e+00,
     0.118634e+00,  -0.204495e-01, 0.103280e+03,  0.982432e-01,  0.477694e-03,
     0.000000e+00,  0.274372e-02,  0.000000e+00,  0.000000e+00,  0.757809e-01,
     0.171403e+00,  -0.105205e-01, 0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  -0.873348e+01, -0.581094e-02, 0.000000e+00,  -0.814944e-02,
     0.000000e+00,  0.000000e+00,  0.517255e-01,  -0.153028e+02, -0.348932e-02,
     0.961771e-03,  0.557732e-02,  -0.454180e-03, 0.988213e-01,  0.940456e-01,
     -0.318797e-01, 0.000000e+00,  0.000000e+00,  0.000000e+00,  0.232122e-02},
    // pb2[50] =
    {-0.600220e-02, 0.277654e-04,  -0.322019e-02, 0.000000e+00,  -0.378551e-02,
     -0.334809e-02, -0.170668e-02, 0.000000e+00,  0.636184e+04,  0.000000e+00,
     0.159986e-02,  -0.388204e-02, -0.164825e-02, -0.747955e+02, -0.105360e-01,
     -0.945723e-02, -0.159824e-02, -0.706730e-03, -0.168513e-01, -0.113023e+00,
     -0.636637e-01, -0.137709e+05, 0.000000e+00,  0.000000e+00,  0.000000e+00,
     -0.152368e+05, -0.586061e-02, -0.253108e-02, 0.000000e+00,  -0.254837e+04,
     -0.328988e-02, 0.000000e+00,  0.000000e+00,  -0.276364e-02, 0.967923e-02,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.434255e-01,  0.114020e-01,  -0.618447e-02, 0.000000e+00,  0.000000e+00,
     -0.302568e+00, -0.327694e-01, -0.671589e+02, -0.228340e-02, 0.000000e+00},
    // pb3[50] =
    {0.306230e-02,  -0.465113e-02, -0.973421e-02, 0.128326e-01,  0.788553e-02,
     0.797197e-02,  -0.120760e-01, -0.767547e-02, -0.120755e-02, -0.298523e-01,
     -0.126560e-01, 0.000000e+00,  -0.568350e-01, -0.153039e-01, 0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.242911e-02,  -0.401347e-02, -0.219074e-02, 0.311281e+01,
     0.323251e-02,  -0.639523e-02, -0.663069e-02, -0.304403e-03, -0.401920e-02,
     -0.118708e-02, 0.415211e+01,  -0.201896e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00},
    // pc1[50] =
    {0.106903e+01,  0.377113e-03,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.898481e-01,  -0.236325e+02, 0.208180e-01,  0.139638e+03,  -0.119444e+00,
     -0.845398e+01, -0.399776e-05, 0.000000e+00,  0.366210e-02,  -0.178929e-02,
     0.190412e-01,  -0.392257e-01, 0.632343e-02,  0.548144e-02,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  -0.243022e-02,
     0.976619e+00,  0.568478e-03,  0.582026e-02,  0.000000e+00,  0.621998e-02,
     0.000000e+00,  0.000000e+00,  0.107674e-01,  0.893820e+02,  -0.192414e-01,
     -0.845398e+01, 0.000000e+00,  0.000000e+00,  -0.200200e-01, -0.195833e-02,
     -0.938391e-02, 0.131480e-01,  -0.260147e-02, -0.808556e-03, 0.511651e-04,
     0.255717e-02,  0.000000e+00,  0.466814e-02,  0.664196e-02,  0.000000e+00},
    // pc2[50] =
    {0.998594e+00,  0.190038e-03, 0.000000e+00,  -0.243825e-01, 0.000000e+00,
     0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00,  0.522105e-01,
     -0.845398e+01, 0.000000e+00, 0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.767271e-02,  0.564539e-02, -0.270623e-02, -0.526454e-03, 0.137075e-02,
     0.133060e-02,  0.000000e+00, 0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.949197e+00,  0.000000e+00, 0.000000e+00,  -0.768008e-01, 0.000000e+00,
     0.000000e+00,  0.000000e+00, -0.137993e-01, -0.140136e+01, 0.120481e+00,
     -0.845398e+01, 0.000000e+00, 0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.987746e-02,  0.175330e-02, -0.688835e-03, 0.287022e-02,  0.000000e+00,
     0.000000e+00,  0.744513e-01, 0.000000e+00,  0.000000e+00,  0.000000e+00},
    // pc3[50] =
    {0.152840e+00,  0.000000e+00,  0.000000e+00, 0.116252e+01,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  -0.649190e+00,
     -0.845398e+01, 0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00,
     -0.584949e-01, -0.102105e+00, 0.299153e-01, -0.486227e-01, 0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00},
    // pd1[50] =
    {0.931402e+00,  0.137976e+00,  0.000000e+00, 0.323736e-03,  0.000000e+00,
     -0.910906e-02, 0.707506e-01,  0.000000e+00, -0.516650e-01, 0.689755e-01,
     0.000000e+00,  0.000000e+00,  0.000000e+00, -0.845398e+01, 0.000000e+00,
     0.281140e-01,  0.000000e+00,  0.736009e+02, 0.596604e-01,  0.000000e+00,
     0.000000e+00,  -0.151792e-02, 0.000000e+00, 0.000000e+00,  0.132397e+00,
     0.213315e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.948758e+01,  0.884541e-02, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.113139e+00,  0.169134e+00,
     0.145192e-01,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00},
    // pd2[50] =
    {0.107906e-01,  0.299942e-04,  0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00, -0.148930e-01,
     -0.787184e-02, 0.000000e+00,  0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00, 0.000000e+00,
     -0.683420e-01, -0.441778e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00,  0.229730e-01,  0.000000e+00, 0.000000e+00, 0.000000e+00},
    // pd3[50] =
    {0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
     0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00},
    // pe1[50] =
    {0.868053e+00,  0.236364e+00,  0.134306e+00,  0.103086e-01,  0.000000e+00,
     -0.379164e-02, -0.157806e+00, 0.000000e+00,  -0.587644e-01, -0.312508e+00,
     0.000000e+00,  0.437387e-01,  -0.354091e-01, -0.223636e+02, 0.000000e+00,
     -0.533976e-01, 0.000000e+00,  0.114091e+03,  0.517497e-01,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.132397e+00,
     0.213315e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.342702e+03,  0.157033e-01,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  -0.366278e-02,
     -0.116193e-02, 0.000000e+00,  0.000000e+00,  0.113139e+00,  0.169134e+00,
     0.178431e-01,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00},
    // pe2[50] =
    {0.162864e-01,  0.316963e-04,  0.127968e-01,  0.000000e+00,  0.000000e+00,
     -0.704599e-02, 0.207921e-02,  0.636660e-02,  0.229940e+05,  0.000000e+00,
     0.127833e-01,  -0.208036e-02, -0.461820e-02, -0.629391e+02, -0.120745e-01,
     0.136675e-01,  0.136011e-01,  -0.537162e-02, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.192509e+05,  0.835522e-02,  0.419439e-02,  0.000000e+00,  0.120366e+05,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  -0.100034e-01, -0.233267e-02,
     0.972374e-02,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     -0.265079e-01, -0.209125e-01, -0.109465e-01, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.217252e-01,  -0.712385e+02, -0.189428e-02, 0.000000e+00},
    // pe3[50] =
    {-0.602006e-02, 0.169058e-01,  0.000000e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.290646e-01,
     0.348971e-02,  0.000000e+00,  0.501174e-01, 0.550595e-01,  0.000000e+00,
     -0.955897e-02, 0.000000e+00,  0.000000e+00, -0.151693e+04, 0.000000e+00,
     0.000000e+00,  0.129306e-01,  0.269567e-02, 0.000000e+00,  0.392243e+01,
     -0.847690e-02, 0.116896e-01,  0.000000e+00, 0.148967e-01,  0.544521e-02,
     0.000000e+00,  0.564918e+01,  0.000000e+00, -0.772178e-02, 0.000000e+00,
     0.000000e+00,  -0.734042e+02, 0.000000e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00, 0.000000e+00,  0.000000e+00},
    // pf1[50] =
    {0.127515e+01,  -0.210472e+00, -0.177924e+00, 0.218900e+00,  0.288436e-01,
     0.190077e-01,  0.291001e+00,  0.217437e-01,  -0.105186e-01, 0.436141e+00,
     0.107605e+00,  0.330755e-01,  0.400581e-01,  -0.958051e+01, 0.000000e+00,
     0.154028e-01,  0.000000e+00,  0.734194e+02,  0.496540e-01,  -0.595906e-02,
     0.384512e-04,  -0.136000e-01, 0.000000e+00,  0.000000e+00,  0.132397e+00,
     0.213315e+00,  -0.416610e-01, 0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.146276e+03,  -0.198408e-01, 0.000000e+00,  0.132530e-01,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  -0.104687e-03,
     -0.147562e-02, 0.000000e+00,  0.000000e+00,  0.113139e+00,  0.169134e+00,
     -0.126913e-01, 0.000000e+00,  0.000000e+00,  0.000000e+00,  -0.608370e-02},
    // pf2[50] =
    {-0.257587e-01, 0.319022e-04,  0.000000e+00,  0.000000e+00,  0.156644e-01,
     0.103640e-01,  0.105771e-02,  0.000000e+00,  0.357949e+04,  0.000000e+00,
     -0.125672e-02, 0.152783e-02,  0.130518e-02,  0.755558e+01,  -0.920341e-02,
     -0.209142e-01, -0.134106e-01, 0.000000e+00,  -0.483312e-01, 0.830900e-01,
     0.988009e-01,  -0.141148e+05, 0.000000e+00,  0.000000e+00,  0.000000e+00,
     -0.105513e+04, 0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.673442e-02,  0.201691e-02,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.598019e-01,  0.633298e-02,  -0.112871e-02, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  -0.128604e-01, 0.000000e+00,  0.000000e+00,  0.000000e+00},
    // pf3[50] =
    {-0.494960e-02, -0.136415e-01, -0.115039e-01, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  -0.586860e-02, -0.141732e-02, 0.213697e-02,  0.263845e+01,
     -0.834186e-02, -0.187336e-01, -0.190870e-01, -0.803810e-02, -0.284279e-02,
     0.256722e-02,  0.171429e+01,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00},
    // pg1[50] =
    {0.573587e+02,  -0.398747e+00, 0.000000e+00,  -0.529554e+00, -0.582186e-02,
     0.714177e-01,  -0.679279e+00, -0.167715e+00, -0.642434e-01, -0.211569e+00,
     -0.159922e+00, -0.171024e-03, -0.115885e+00, 0.651603e+01,  0.000000e+00,
     -0.176683e+00, 0.650395e-01,  0.143504e+01,  0.928208e-01,  0.511662e-02,
     0.000000e+00,  0.995121e-02,  0.000000e+00,  0.000000e+00,  0.132397e+00,
     0.213315e+00,  0.101451e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.567667e+02,  0.238192e-02,  0.000000e+00,  -0.188240e-01,
     0.000000e+00,  0.000000e+00,  0.476218e-01,  0.235206e+02,  0.475901e-02,
     0.576162e-02,  0.151815e-01,  -0.192730e-01, 0.113139e+00,  0.169134e+00,
     -0.288771e-01, 0.000000e+00,  0.000000e+00,  0.000000e+00,  0.118418e-02},
    // pg2[50] =
    {-0.368927e-02, 0.314704e-04,  0.882198e-02,  0.000000e+00,  -0.192562e-01,
     -0.258674e-02, -0.219913e-01, 0.000000e+00,  0.438655e+04,  0.000000e+00,
     0.760126e-02,  0.259438e-02,  0.172310e-02,  0.779204e+02,  0.797786e-03,
     -0.770510e-02, 0.190982e-02,  0.272707e-02,  0.101016e-01,  0.116537e+00,
     -0.312236e-02, 0.139783e+05,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     -0.130712e+04, 0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  -0.320544e-02, -0.206970e-01,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.159010e-01,  -0.191427e-02, -0.342829e-01, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  -0.345379e-01, 0.894518e+02,  0.171556e-02,  0.000000e+00},
    // pg3[50] =
    {-0.765278e-02, -0.208987e-03, -0.157393e-01, 0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  -0.860673e-02, -0.119922e-01, -0.646356e-02, -0.300107e+01,
     -0.932511e-02, -0.150205e-01, -0.867835e-02, -0.764801e-02, -0.131495e-01,
     -0.676720e-02, -0.182396e+01, 0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
     0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00}};

const double ps[] = {
    // ph1[50] =
    0.951363e+00, -0.467542e-01, 0.120260e+00, 0.000000e+00, 0.000000e+00,
    0.191357e-01, 0.000000e+00, 0.000000e+00, 0.125429e-02, -0.133240e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, -0.845398e+01, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.252317e-02, 0.000000e+00, -0.973404e-02, 0.132397e+00,
    0.213315e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, -0.718482e-03, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.787683e-02, -0.233698e-02, 0.113139e+00, 0.169134e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    // ph2[50] =
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    // ph3[50] =
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00};

const double pdl_0[] = {0.933804e+00, 0.547446e+01, 0.153263e+00,
                        0.919303e+00, 0.164109e+02, 0.427083e+01};

const double pdl_1[] = {
    0.115897e+01, 0.471094e+00, 0.109459e+01, 0.525012e+01, 0.100000e+01,
    0.100000e+01, 0.103999e+01, 0.767132e+00, 0.110514e+01, 0.175636e+01,
    0.110845e+01, 0.233439e+01, 0.796532e+00, 0.431520e+01, 0.407300e+01,
    0.101885e+01, 0.239547e+00, 0.253791e-05, 0.842931e+00, 0.104192e+01,
    0.200202e+01, 0.100000e+01, 0.100000e+01, 0.100000e+01, 0.100000e+01};

const double ptm[] = {0.104130e+04, 0.386000e+03, 0.190000e+03, 0.166728e+02,
                      0.115000e+03, 0.120000e+03, 0.945537e+02, 0.000000e+00};

const double pdm[][7] = {{0.245600e+08, 0.859400e+11, 0.281000e+12, 0.330000e+11,
                         0.133000e+10, 0.176100e+06, 0.100000e+08},
                        {0.671072e-05, 0.540000e+00, 0.000000e+00, 0.268270e+00,
                         0.119615e-01, 0.100000e+01, 0.100000e+01},
                        {0.100000e+03, 0.105000e+03, 0.105000e+03, 0.105000e+03,
                         0.105000e+03, 0.950000e+02, 0.105000e+03},
                        {0.000000e+00, -0.800000e+01, 0.280000e+02,
                         0.000000e+00, 0.000000e+00, -0.800000e+01,
                         -0.800000e+01},
                        {0.110000e+03, 0.110000e+03, 0.289500e+02, 0.110000e+03,
                         0.110000e+03, 0.110000e+03, 0.110000e+03},
                        {0.100000e+02, 0.100000e+02, 0.000000e+00, 0.100000e+02,
                         0.100000e+02, 0.100000e+02, 0.100000e+02},
                        {0.000000e+00, 0.900000e+02, 0.000000e+00, 0.000000e+00,
                         0.000000e+00, 0.900000e+02, 0.900000e+02},
                        {0.000000e+00, 0.200000e+01, 0.000000e+00, 0.000000e+00,
                         0.000000e+00, 0.200000e+01, 0.200000e+01}};

double ccor(double alt, double r, double h1, double zh) noexcept {
  // chemistry/dissociation correction for msis models
  // eq. a20a or eq. a21
  const double e = (alt - zh) / h1;

  double ccor;
  if (e > 70e0) {
    ccor = 0e0;
  } else {
    if (e < -70e0) {
      ccor = r;
    } else {
      ccor = r / (1e0 + std::exp(e));
    }
  }

  return std::exp(ccor);
}

double dnet(double dd, double dm, double zhm, double xmm, double xm) noexcept {
  // turbopause correction for msis models
  // eq. a12b
  const double a = zhm / (xmm - xm);

  // eq. a12a
  const double ylog = a * std::log(dm / dd);

  double dnet;
  if (ylog < -10e0) {
    dnet = dd;
  } else {
    if (ylog > 10e0) {
      dnet = dm;
    } else {
      dnet = dd * std::pow((1e0 + std::exp(ylog)), (1e0 / a));
    }
  }

  return dnet;
}

///
double glob5l(double day, const double *p, const double *apt, double dfa,
              double apdf, const double *sw, const double *swc,
              const dso::Mat2D<MatrixStorageType::RowWise> &plg,
              const trignums &trigs) noexcept {
  const double dr = 1.72142e-2;
  double t[] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
  double dayl = -1e0;
  double p7 = -1000e0;
  double p9 = -1000e0;
  double p11 = -1000e0;

  double cd7, cd9, cd11;
  if ((day != dayl) || (p7 != p[6]))
    cd7 = std::cos(dr * (day - p[6]));
  if ((day != dayl) || (p9 != p[8]))
    cd9 = std::cos(2e0 * dr * (day - p[8]));
  if ((day != dayl) || (p11 != p[10]))
    cd11 = std::cos(dr * (day - p[10]));

  dayl = day;
  p7 = p[6];
  p9 = p[8];
  p11 = p[10];

  t[0] = p[1] * dfa;
  t[1] = p[3] * plg(2, 0);
  t[2] = p[5] * cd7;
  t[3] = p[7] * cd9;
  t[4] = (p[9] * plg(1, 0) + p[21] * plg(3, 0)) * cd11;
  t[5] = 0.0;
  t[6] = p[13] * plg(1, 1) * trigs.ctloc() + p[14] * plg(1, 1) * trigs.stloc();
  t[7] = (p[15] * plg(2, 2) + p[17] * plg(4, 2) +
          (p[19] * plg(5, 2)) * cd11 * swc[4]) *
             trigs.c2tloc() +
         (p[16] * plg(2, 2) + p[18] * plg(4, 2) +
          (p[20] * plg(5, 2)) * cd11 * swc[4]) *
             trigs.s2tloc();
  t[13] =
      p[11] * plg(3, 3) * trigs.c3tloc() + p[24] * plg(3, 3) * trigs.s3tloc();

  if (sw[8] == 1e0) {
    t[8] = apdf * (p[22] + p[23] * plg(2, 0) * swc[1]);
  } else if (sw[8] == -1e0) {
    t[8] = p[2] * apt[2] + p[4] * plg(2, 0) * apt[2] * swc[1];
  }

  // params not used: 13
  double tt = 0e0;
  for (int i = 0; i < 14; i++)
    tt += std::abs(sw[i]) * t[i];
  return tt;
}

// todo: fmod not needed here!
void tselect(const int *sv, double *sav, double *sw, double *swc) noexcept {
  for (int i = 0; i < 24; i++) {
    sav[i] = sv[i];
    sw[i] = std::fmod(sv[i], 2e0);
    swc[i] = 1e0 * (std::abs(sv[i] > 0e0));
  }
  return;
}

double sumex(double ex) noexcept {
  // % eq. a24c
  return 1e0 + (1e0 - std::pow(ex, 19)) / (1e0 - ex) * std::sqrt(ex);
}

double g0(double a, double p25, double p26) noexcept {
  // % eq. a24d
  return a - 4e0 +
         (p26 - 1e0) *
             (a - 4e0 +
              (std::exp(-std::abs(p25) * (a - 4e0)) - 1e0) / std::abs(p25));
}

double sg0(double ex, const double *ap, const double *p, double p24) noexcept {
  // eq. a24a
  const double ex2 = ex * ex;
  const double ex3 = ex2 * ex;
  const double ex4 = ex3 * ex;
  const double ex8 = ex4 * ex4;
  const double ex12 = ex8 * ex4;
  double out =
      (g0(ap[0], p[23], p24) +
       (g0(ap[1], p[23], p24) * ex + g0(ap[2], p[23], p24) * ex2 +
        g0(ap[3], p[23], p24) * ex3 +
        (g0(ap[4], p[23], p24) * (ex4) + g0(ap[5], p[23], p24) * (ex12)) *
            (1e0 - (ex8)) / (1e0 - ex))) /
      sumex(ex);
  return out;
}

double globe5(double yrd, double sec, double lat, double along, double tloc,
              double f107a, double f107, const double *ap, const double *p,
              const double *sw, const double *swc, trignums &trigs, double &dfa, double &apdf, double &day_,
              dso::Mat2D<MatrixStorageType::RowWise> &plg,
              double *apt) noexcept {
  int nsw = 14;
  double t[15] = {0e0};
  const double dgtr = 1.74533e-2;
  const double dr = 1.72142e-2;
  const double hr = .2618e0;
  const double sr = 7.2722e-5;

  day_ = yrd - std::trunc(yrd / 1e3) * 1e3;
  double dayl = -1e0;

  double xl = 1000e0;
  // eq. a22 (remainder of code)
  if (xl != lat) {
    // calculate legendre polynomials
    const double c = std::sin(lat * dgtr);
    const double s = std::cos(lat * dgtr);
    const double c2 = c * c;
    const double c4 = c2 * c2;
    const double s2 = s * s;

    plg(1, 0) = c;
    plg(2, 0) = 0.5 * (3.0 * c2 - 1.0);
    plg(3, 0) = 0.50 * (5.0 * c * c2 - 3.0 * c);
    plg(4, 0) = (35.0 * c4 - 30.0 * c2 + 3.0) / 8.0;
    plg(5, 0) = (63.0 * c2 * c2 * c - 70.0 * c2 * c + 15.0 * c) / 8.0;
    plg(6, 0) = (11.0 * c * plg(5, 0) - 5.0 * plg(4, 0)) / 6.0;
    plg(1, 1) = s;
    plg(2, 1) = 3.0 * c * s;
    plg(3, 1) = 1.50 * (5.0 * c2 - 1.0) * s;
    plg(4, 1) = 2.50 * (7.0 * c2 * c - 3.0 * c) * s;
    plg(5, 1) = 1.8750 * (21.0 * c4 - 14.0 * c2 + 1.0) * s;
    plg(6, 1) = (11.0 * c * plg(5, 1) - 6.0 * plg(4, 1)) / 5.0;
    plg(2, 2) = 3.0 * s2;
    plg(3, 2) = 15.0 * s2 * c;
    plg(4, 2) = 7.50 * (7.0 * c2 - 1.0) * s2;
    plg(5, 2) = 3.0 * c * plg(4, 2) - 2.0 * plg(3, 2);
    plg(6, 2) = (11.0 * c * plg(5, 2) - 7.0 * plg(4, 2)) / 4.0;
    plg(7, 2) = (13.0 * c * plg(6, 2) - 8.0 * plg(5, 2)) / 5.0;
    plg(3, 3) = 15.0 * s2 * s;
    plg(4, 3) = 105.0 * s2 * s * c;
    plg(5, 3) = (9.0 * c * plg(4, 3) - 7.0 * plg(3, 3)) / 2.0;
    plg(6, 3) = (11.0 * c * plg(5, 3) - 8.0 * plg(4, 3)) / 3.0;
    xl = lat;
  }

  double tll = 1000e0;
  if (tll != tloc) {
    trigs.compute(hr, tloc);
    tll = tloc;
  }

  double p14 = -1000e0;
  double cd14;//, c2d14;
  if ((day_ != dayl) || (p[13] != p14)) {
    cd14 = std::cos(dr * (day_ - p[13]));
    // c2d14 = std::cos(dr * 2.0 * (day_ - p[13]));
    p14 = p[13];
  }

  double p18 = -1000e0;
  double cd18;
  if ((day_ != dayl) || (p[17] != p18)) {
    cd18 = std::cos(2.0 * dr * (day_ - p[17]));
    p18 = p[17];
  }

  double p32 = -1000e0;
  double cd32;
  if ((day_ != dayl) || (p[31] != p32)) {
    cd32 = std::cos(dr * (day_ - p[31]));
    p32 = p[31];
  }

  double p39 = -1000e0;
  double cd39;
  if ((day_ != dayl) || (p[38] != p39)) {
    cd39 = std::cos(2.0 * dr * (day_ - p[38]));
    p39 = p[38];
  }

  dayl = day_;

  // f10.7 effect
  double df = f107 - f107a;
  dfa = f107a - 150e0;
  t[0] = p[19] * df + p[20] * df * df + p[21] * dfa + p[29] * dfa * dfa;
  const double f1 = 1e0 + (p[47] * dfa + p[19] * df + p[20] * df * df) * swc[0];
  const double f2 = 1e0 + (p[49] * dfa + p[19] * df + p[20] * df * df) * swc[0];

  // time independent
  t[1] = (p[1] * plg(2, 0) + p[2] * plg(4, 0) + p[22] * plg(6, 0)) +
         (p[14] * plg(2, 0)) * dfa * swc[0] + p[26] * plg(1, 0);

  // symmetrical annual
  t[2] = p[18] * cd32;

  // symmetrical semiannual
  t[3] = (p[15] + p[16] * plg(2, 0)) * cd18;

  // asymmetrical annual
  t[4] = f1 * (p[9] * plg(1, 0) + p[10] * plg(3, 0)) * cd14;

  // asymmetrical semiannual
  t[5] = p[37] * plg(1, 0) * cd39;

  // diurnal
  const double t71 = (p[11] * plg(2, 1) + p[35] * plg(1, 1)) * cd14 * swc[4];
  const double t72 = (p[12] * plg(2, 1) + p[36] * plg(1, 1)) * cd14 * swc[4];
  t[6] = f2 * ((p[3] * plg(1, 1) + p[4] * plg(3, 1) + p[27] * plg(5, 1) + t71) *
                   trigs.ctloc() +
               (p[6] * plg(1, 1) + p[7] * plg(3, 1) + p[28] * plg(5, 1) + t72) *
                   trigs.stloc());

  // semidiurnal
  const double t81 = (p[23] * plg(3, 2)) * cd14 * swc[4];
  const double t82 = (p[33] * plg(3, 2)) * cd14 * swc[4];
  t[7] = f2 * ((p[5] * plg(2, 2) + p[41] * plg(4, 2) + t81) * trigs.c2tloc() +
               (p[8] * plg(2, 2) + p[42] * plg(4, 2) + t82) * trigs.s2tloc());

  // terdiurnal
  t[13] = f2 * ((p[39] * plg(2, 2) +
                 (p[93] * plg(4, 3) + p[46] * plg(6, 3)) * cd14 * swc[4]) *
                    trigs.s3tloc() +
                (p[40] * plg(3, 3) +
                 (p[94] * plg(4, 3) + p[48] * plg(6, 3)) * cd14 * swc[4]) *
                    trigs.c3tloc());

  // magnetic activity based on daily ap
  if ((sw[8] == -1e0) && (p[51] != 0e0)) {
    double exp1 = std::exp(-10800e0 * std::abs(p[51]) /
                           (1e0 + p[138] * (45e0 - std::abs(lat))));
    if (exp1 > .99999e0) {
      exp1 = .99999e0;
    }
    double exp2 = std::exp(-10800e0 * std::abs(p[53]));
    if (exp2 > .99999e0) {
      exp2 = .99999e0;
    }
    double p24 = (p[24] < 1.e-4) ? 1.e-4 : p[24];
    //if (p[24] < 1.e-4) {
    //  p[24] = 1.e-4;
    //}
    apt[0] = sg0(exp1, ap, p, p24);
    apt[2] = sg0(exp2, ap, p, p24);
    t[8] = apt[0] *
           (p[50] + p[96] * plg(2, 0) + p[54] * plg(4, 0) +
            (p[125] * plg(1, 0) + p[126] * plg(3, 0) + p[127] * plg(5, 0)) *
                cd14 * swc[4] +
            (p[128] * plg(1, 1) + p[129] * plg(3, 1) + p[130] * plg(5, 1)) *
                swc[6] * std::cos(hr * (tloc - p[131])));
  } else {
    const double apd = (ap[0] - 4e0);
    double p44 = p[43];
    const double p45 = p[44];
    if (p44 < 0e0) {
      p44 = 1.e-5;
    }
    apdf = (apd + (p45 - 1e0) * (apd + (std::exp(-p44 * apd) - 1e0) / p44));
    t[8] =
        apdf * (p[32] + p[45] * plg(2, 0) + p[34] * plg(4, 0) +
                (p[100] * plg(1, 0) + p[101] * plg(3, 0) + p[102] * plg(5, 0)) *
                    cd14 * swc[4] +
                (p[121] * plg(1, 1) + p[122] * plg(3, 1) + p[123] * plg(5, 1)) *
                    swc[6] * std::cos(hr * (tloc - p[124])));
  }

  if ((sw[9] != 0e0) && (along > -1000e0)) {
    // longitudinal
    t[10] =
        (1e0 + p[89] * plg(1, 0)) * (1e0 + p[80] * dfa * swc[0]) *
        ((p[64] * plg(2, 1) + p[65] * plg(4, 1) + p[66] * plg(6, 1) +
          p[103] * plg(1, 1) + p[104] * plg(3, 1) + p[105] * plg(5, 1) +
          swc[4] *
              (p[190] * plg(1, 1) + p[110] * plg(3, 1) + p[111] * plg(5, 1)) *
              cd14) *
             std::cos(dgtr * along) +
         (p[90] * plg(2, 1) + p[91] * plg(4, 1) + p[92] * plg(6, 1) +
          p[106] * plg(1, 1) + p[107] * plg(3, 1) + p[108] * plg(5, 1) +
          swc[4] *
              (p[112] * plg(1, 1) + p[113] * plg(3, 1) + p[114] * plg(5, 1)) *
              cd14) *
             std::sin(dgtr * along));
    // ut and mixed ut,longitude
    t[11] = (1e0 + p[95] * plg(1, 0)) * (1e0 + p[81] * dfa * swc[0]) *
                (1e0 + p[119] * plg(1, 0) * swc[4] * cd14) *
                ((p[68] * plg(1, 0) + p[69] * plg(3, 0) + p[70] * plg(5, 0)) *
                 std::cos(sr * (sec - p[71]))) +
            swc[10] *
                (p[76] * plg(3, 2) + p[77] * plg(5, 2) + p[78] * plg(7, 2)) *
                std::cos(sr * (sec - p[79]) + 2e0 * dgtr * along) *
                (1e0 + p[137] * dfa * swc[0]);
    // ut,longitude magnetic activity
    if ((sw[8] == -1e0) && (p[51] != 0e0)) {
      t[12] =
          apt[0] * swc[10] * (1e0 + p[132] * plg(1, 0)) *
              ((p[52] * plg(2, 1) + p[98] * plg(4, 1) + p[67] * plg(6, 1)) *
               std::cos(dgtr * (along - p[97]))) +
          apt[0] * swc[10] * swc[4] *
              (p[133] * plg(1, 1) + p[134] * plg(3, 1) + p[135] * plg(5, 1)) *
              cd14 * std::cos(dgtr * (along - p[136])) +
          apt[0] * swc[11] *
              (p[55] * plg(1, 0) + p[56] * plg(3, 0) + p[57] * plg(5, 0)) *
              std::cos(sr * (sec - p[58]));
    } else {
      t[12] =
          apdf * swc[10] * (1e0 + p[120] * plg(1, 0)) *
              ((p[60] * plg(2, 1) + p[61] * plg(4, 1) + p[62] * plg(6, 1)) *
               std::cos(dgtr * (along - p[63]))) +
          apdf * swc[10] * swc[4] *
              (p[115] * plg(1, 1) + p[116] * plg(3, 1) + p[117] * plg(5, 1)) *
              cd14 * std::cos(dgtr * (along - p[118])) +
          apdf * swc[11] *
              (p[83] * plg(1, 0) + p[84] * plg(3, 0) + p[85] * plg(5, 0)) *
              std::cos(sr * (sec - p[75]));
    }
    // parms not used: 60,83,100,140-150
  }

  double tinf = 0e0;
  if (sw[8] == -1e0)
    tinf = p[30];

  for (int i = 0; i < nsw; i++)
    tinf += std::abs(sw[i]) * t[i];

  return tinf;
}

double zeta(double zz, double zl) noexcept {
  return (zz - zl) * (re + zl) / (re + zz);
}

double denss(double alt, double za, double zlb, double tinf, double tlb,
             double s2, double z0, double t0, double tr12, double xm,
             double alpha, double dlb, double &tz) noexcept {
  // calculate temperature and density profiles for msis models
  const double rgas = 831.4e0;

  double denss = 1e0;
  double z = std::max(alt, za);
  // eq. a4a
  double zg2 = zeta(z, zlb);
  // eq. a1a
  double tt = tinf - (tinf - tlb) * std::exp(-s2 * zg2);
  double ta = tt;
  tz = tt;
  denss = tz;

  double zg0, bb, x, x2, cc, dd;
  if (alt < za) {
    // eq.a4b
    zg0 = zeta(z0, za);
    // eq.a2b
    const double dta =
        (tinf - ta) * s2 * ((re + zlb) / (re + za)) * ((re + zlb) / (re + za));
    // eq.a3e
    const double t12 = t0 + tr12 * (ta - t0);
    // eq.a4b
    const double zg1 = zeta(alt, za);
    // calculate temperature below za, eq.a3a
    dd = 0.666666e0 * zg0 * dta / ta / ta - 3.11111e0 * (1e0 / ta - 1e0 / t0) +
         7.11111e0 * (1e0 / t12 - 1e0 / t0);
    // eq.a3b
    cc = zg0 * dta / (2e0 * ta * ta) - (1e0 / ta - 1e0 / t0) - 2e0 * dd;
    // eq.a3c
    bb = (1e0 / ta - 1e0 / t0) - cc - dd;
    // eq.a3d
    x = (zg0 - zg1) / zg0;
    // eq.a1b
    x2 = x * x;
    tz = 1e0 / (1e0 / t0 + bb * x2 + cc * x2 * x2 + dd * x2 * x2 * x2);
    denss = tz;
    // double taf = (t12 - t0) / (ta - t0);
  }

  if (xm != 0e0)
    if ((ta <= 0e0) || (tz <= 0e0)) {
      tt = tlb;
      ta = tlb;
      tz = tlb;
    }
  // calculate density above za, eq. a17a
  double f2 = (1e0 + zlb / re) * (1e0 + zlb / re);
  double glb = gsurf / f2;
  // eq. a16a
  const double gamma = xm * glb / (s2 * rgas * tinf);
  // eq. a13, a14a, & a15
  const double densa = dlb * std::pow(tlb / tt, 1e0 + alpha + gamma) *
                       std::exp(-s2 * gamma * zg2);
  denss = densa;
  if (alt < za) {
    // calculate density below za, eq. a17b
    f2 = (1e0 + za / re) * (1e0 + za / re);
    glb = gsurf / f2;
    // eq. a16b
    const double gamm = xm * glb * zg0 / rgas;
    // eq. a13, a14b, & a15
    denss = densa * std::pow(ta / tz, 1e0 + alpha) *
            std::exp(gamm * ((x - 1e0) / t0 + bb * (x * x2 - 1e0) / 3e0 +
                             cc * (x2 * x2 * x - 1e0) / 5e0 +
                             dd * (x2 * x2 * x2 * x - 1e0) / 7e0));
  }

  return denss;
}

int dso::air_density_models::msis86::msis86(int doy, double sec, double alt,
                                            double glat, double glong,
                                            double stl, double f107a,
                                            double f107, const int *switches,
                                            const double *ap, double *d,
                                            double *t) noexcept {

  for (int i = 0; i < 8; i++)
    d[i] = 0e0;
  for (int i = 0; i < 2; i++)
    t[i] = 0e0;

  // const int mt[] = {48, 0, 4, 16, 28, 32, 40, 1, 49, 14};
  const double altl[] = {200e0, 400e0, 150e0, 200e0,
                         240e0, 450e0, 320e0, 450e0};
  double dfa, apdf, day_;
  trignums trigs;
  dso::Mat2D<MatrixStorageType::RowWise> plg(8, 8);
  double apt[4];
  // int ifl = 0;
  // int imr = 0;

  //
  double sav[24], sw[24], swc[24];
  tselect(switches, sav, sw, swc);

  // eq. a7
  double gggg = globe5(doy, sec, glat, glong, stl, f107a, f107, ap, pt, sw, swc, trigs,
                       dfa, apdf, day_, plg, apt);

  double tinf = ptm[0] * (1e0 + sw[15] * gggg) * pt[0];
  double za = ptm[4] * pdl_1[15];

  // eq. a9 (we need pd(3,76:100))
  const double *pd_slice = pd[2] + 2;
  double t0 = ptm[2] * pd[2][75] *
              (1e0 + sw[17] * glob5l(doy, pd_slice, apt, dfa, apdf, sw, swc,
                                     plg, trigs));
  // eq. a8 (we need pd(3,26:50))
  pd_slice = pd[2] + 25;
  double tlb = ptm[1] *
               (1e0 + sw[16] * glob5l(doy, pd_slice, apt, dfa, apdf, sw, swc,
                                      plg, trigs)) *
               pd[2][25];
  // eq. a10 (need pd(3,51:75))
  pd_slice = pd[2] + 50;
  double z0 = ptm[6] *
              (1e0 + sw[19] * glob5l(doy, pd_slice, apt, dfa, apdf, sw, swc,
                                     plg, trigs)) *
              pd[2][50];
  // eq. a6
  double g0 = ptm[3] * ps[0] *
              (1e0 + sw[18] * globe5(doy, sec, glat, glong, stl, f107a, f107,
                                     ap, ps, sw, swc, trigs, dfa, apdf, day_, plg, apt));
  // eq. a5
  double s = g0 / (tinf - tlb);
  // eq. a11 (need pd(3,101:125))
  pd_slice = pd[2] + 100;
  double tr12 = pd[2][100] * (1e0 + sw[21] * glob5l(doy, pd_slice, apt, dfa,
                                                    apdf, sw, swc, plg, trigs));
  t[0] = tinf;
  // eq. a18  n2 (we need pd(3,1:25))
  pd_slice = pd[2] + 24;
  double g28 =
      sw[20] * glob5l(doy, pd_slice, apt, dfa, apdf, sw, swc, plg, trigs);
  t[0] = tinf;
  double xmm = pdm[4][2];

  // **** N2 density ****
  double tz;
  // eq. a18
  const double db28 = pdm[0][2] * std::exp(g28) * pd[2][0];
  //  eq. a13 - a17
  d[2] =
      denss(alt, db28, tinf, tlb, 28e0, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
  t[1] = tz;
  // double dd = d[2];
  // eq. a19
  double zh28 = pdm[2][2];
  double zhm28 = pdm[3][2] * pdl_1[5];
  double xmd = 28e0 - xmm;
  double b28 =
      denss(zh28, db28, tinf, tlb, xmd, -1e0, ptm[5], s, t0, za, z0, tr12, tz);
  if ((alt < altl[2]) && (sw[14] != 0e0)) {
    double dm28 =
        denss(alt, b28, tinf, tlb, xmm, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
    // eq. a12
        d[2] = dnet(d[2], dm28, zhm28, xmm, 28e0);
  }

  // **** He density ****
  // eq. a18
  double g4 = sw[20] * globe5(doy, sec, glat, glong, stl, f107a, f107, ap,
                              pd[0], sw, swc, trigs, dfa, apdf, day_, plg, apt);
  double db04 = pdm[0][0] * std::exp(g4) * pd[0][0];
  // eq. a13 - a17
  d[0] =
      denss(alt, db04, tinf, tlb, 4e0, -.40e0, ptm[5], s, t0, za, z0, tr12, tz);
  t[1] = tz;
  // dd = d[0];
  if ((alt < altl[0]) && (sw[14] != 0e0)) {
    // eq. a19
    double zh04 = pdm[2][0];
    double b04 = denss(zh04, db04, tinf, tlb, 4e0 - xmm, -1.40e0, ptm[5], s, t0,
                       za, z0, tr12, tz);
    t[1] = tz;
    double dm04 =
        denss(alt, b04, tinf, tlb, xmm, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
    t[1] = tz;
    // eq. a12
    double zhm04 = zhm28;
    d[0] = dnet(d[0], dm04, zhm04, xmm, 4e0);
    // eq. a20b
    double rl = std::log(b28 * pdm[1][0] / b04);
    // eq. a20a
    double zc04 = pdm[4][0] * pdl_1[0];
    double hc04 = pdm[5][1] * pdl_1[1];
    d[0] *= ccor(alt, rl, hc04, zc04);
  }

  // **** O density ****
  // eq. a18
  double g16 = sw[20] * globe5(doy, sec, glat, glong, stl, f107a, f107, ap,
                               pd[1], sw, swc, trigs, dfa, apdf, day_, plg, apt);
  double db16 = pdm[0][1] * std::exp(g16) * pd[1][0];
  // eq. a13 - a17
  d[1] =
      denss(alt, db16, tinf, tlb, 16e0, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
  t[1] = tz;
  // dd = d[1];
  if ((alt <= altl[1]) && (sw[14] != 0e0)) {
    // corrected from pdm(3,1) to pdm(3,2)  12/2/85
    // eq. a19
    double zh16 = pdm[2][1];
    double b16 = denss(zh16, db16, tinf, tlb, 16e0 - xmm, -1e0, ptm[5], s, t0,
                       za, z0, tr12, tz);
    t[1] = tz;
    double dm16 =
        denss(alt, b16, tinf, tlb, xmm, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
    t[1] = tz;
    // eq. a12
    double zhm16 = zhm28;
    d[1] = dnet(d[1], dm16, zhm16, xmm, 16e0);
    // eq. a20b
    double rl = std::log(b28 * pdm[1][1] * std::abs(pdl_1[16]) / b16);
    // eq. a20a
    double hc16 = pdm[5][1] * pdl_1[3];
    double zc16 = pdm[4][1] * pdl_1[2];
    d[1] = d[1] * ccor(alt, rl, hc16, zc16);
    // eq. a21
    double hcc16 = pdm[7][1] * pdl_1[13];
    double zcc16 = pdm[6][1] * pdl_1[12];
    double rc16 = pdm[3][1] * pdl_1[14];
    d[1] = d[1] * ccor(alt, rc16, hcc16, zcc16);
  }

  // **** O2 density ****
  // eq. a18
  double g32 = sw[20] * globe5(doy, sec, glat, glong, stl, f107a, f107, ap,
                               pd[3], sw, swc, trigs, dfa, apdf, day_, plg, apt);
  double db32 = pdm[0][3] * std::exp(g32) * pd[3][0];
  // eq. a13 - a17
  d[3] =
      denss(alt, db32, tinf, tlb, 32.0, 0.0, ptm[5], s, t0, za, z0, tr12, tz);
  t[1] = tz;
  // dd = d[3];
  if ((alt <= altl[3]) && (sw[14] != 0.0)) {
    // eq. a19
    double zh32 = pdm[2][3];
    double b32 = denss(zh32, db32, tinf, tlb, 32e0 - xmm, -1e0, ptm[5], s, t0,
                       za, z0, tr12, tz);
    t[1] = tz;
    double dm32 =
        denss(alt, b32, tinf, tlb, xmm, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
    t[1] = tz;
    // eq. a12
    double zhm32 = zhm28;
    d[3] = dnet(d[3], dm32, zhm32, xmm, 32e0);
    // eq. a20b
    double rl = std::log(b28 * pdm[1][3] / b32);
    // eq. a20a
    double hc32 = pdm[5][3] * pdl_1[7];
    double zc32 = pdm[4][3] * pdl_1[6];
    d[3] = d[3] * ccor(alt, rl, hc32, zc32);
  }

  // **** Air density ****
  // eq. a18
  double g40 = sw[20] * globe5(doy, sec, glat, glong, stl, f107a, f107, ap,
                               pd[4], sw, swc, trigs, dfa, apdf, day_, plg, apt);
  double db40 = pdm[0][4] * std::exp(g40) * pd[4][0];
  // eq. a13 - a17
  d[4] =
      denss(alt, db40, tinf, tlb, 40e0, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
  t[1] = tz;
  // dd = d[4];
  if ((alt <= altl[4]) && (sw[14] != 0e0)) {
    // eq. a19
    double zh40 = pdm[2][4];
    double b40 = denss(zh40, db40, tinf, tlb, 40e0 - xmm, -1e0, ptm[5], s, t0,
                       za, z0, tr12, tz);
    t[1] = tz;
    double dm40 =
        denss(alt, b40, tinf, tlb, xmm, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
    t[1] = tz;
    // eq. a12
    double zhm40 = zhm28;
    d[4] = dnet(d[4], dm40, zhm40, xmm, 40e0);
    // eq. a20b
    double rl = std::log(b28 * pdm[1][4] / b40);
    // eq. a20a
    double hc40 = pdm[5][4] * pdl_1[9];
    double zc40 = pdm[4][4] * pdl_1[8];
    d[4] = d[4] * ccor(alt, rl, hc40, zc40);
  }

  // **** hydrogen density ****
  // eq. a18
  double g1 = sw[20] * globe5(doy, sec, glat, glong, stl, f107a, f107, ap,
                              pd[5], sw, swc, trigs, dfa, apdf, day_, plg, apt);
  double db01 = pdm[0][5] * std::exp(g1) * pd[5][0];
  // eq. a13 - a17
  d[6] =
      denss(alt, db01, tinf, tlb, 1e0, -.40e0, ptm[5], s, t0, za, z0, tr12, tz);
  t[1] = tz;
  // dd = d[6];
  if ((alt <= altl[6]) && (sw[14] != 0e0)) {
    // eq. a19
    double zh01 = pdm[2][5];
    double b01 = denss(zh01, db01, tinf, tlb, 1e0 - xmm, -1.40e0, ptm[5], s, t0,
                       za, z0, tr12, tz);
    t[1] = tz;
    double dm01 =
        denss(alt, b01, tinf, tlb, xmm, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
    t[1] = tz;
    // eq. a12
    double zhm01 = zhm28;
    d[6] = dnet(d[6], dm01, zhm01, xmm, 1e0);
    // eq. a20b
    double rl = std::log(b28 * pdm[1][5] * std::abs(pdl_1[17]) / b01);
    // eq. a20a
    double hc01 = pdm[5][5] * pdl_1[11];
    double zc01 = pdm[4][5] * pdl_1[10];
    d[6] = d[6] * ccor(alt, rl, hc01, zc01);
    // eq. a21
    double hcc01 = pdm[7][5] * pdl_1[19];
    double zcc01 = pdm[6][5] * pdl_1[18];
    double rc01 = pdm[3][5] * pdl_1[20];
    d[6] = d[6] * ccor(alt, rc01, hcc01, zcc01);
  }

  // **** atomic nitrogen density ****
  // eq. a18
  double g14 = sw[20] * globe5(doy, sec, glat, glong, stl, f107a, f107, ap,
                               pd[6], sw, swc, trigs, dfa, apdf, day_, plg, apt);
  double db14 = pdm[0][6] * std::exp(g14) * pd[6][0];
  // eq. a13 - a17
  d[7] =
      denss(alt, db14, tinf, tlb, 14e0, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
  t[1] = tz;
  // dd = d[7];
  if ((alt <= altl[7]) && (sw[14] != 0e0)) {
    // eq. a19
    double zh14 = pdm[2][6];
    double b14 = denss(zh14, db14, tinf, tlb, 14e0 - xmm, -1e0, ptm[5], s, t0,
                       za, z0, tr12, tz);
    t[1] = tz;
    double dm14 =
        denss(alt, b14, tinf, tlb, xmm, 0e0, ptm[5], s, t0, za, z0, tr12, tz);
    t[1] = tz;
    // eq. a12
    double zhm14 = zhm28;
    d[7] = dnet(d[7], dm14, zhm14, xmm, 14e0);
    // eq. a20b
    double rl = std::log(b28 * pdm[1][6] * std::abs(pdl_0[2]) / b14);
    // eq. a20a
    double hc14 = pdm[5][6] * pdl_0[1];
    double zc14 = pdm[4][6] * pdl_0[0];
    d[7] = d[7] * ccor(alt, rl, hc14, zc14);
    // eq. a21
    double hcc14 = pdm[7][6] * pdl_0[4];
    double zcc14 = pdm[6][6] * pdl_0[3];
    double rc14 = pdm[3][6] * pdl_0[5];
    d[7] = d[7] * ccor(alt, rc14, hcc14, zcc14);
  }

  //  total mass density
  d[5] = 1.66e-24 * (4e0 * d[0] + 16e0 * d[1] + 28e0 * d[2] + 32e0 * d[3] +
                     40e0 * d[4] + d[6] + 14e0 * d[7]);
  /*double db48 = 1.66e-24 * (4e0 * db04 + 16e0 * db16 + 28e0 * db28 +
                            32e0 * db32 + 40e0 * db40 + db01 + 14e0 * db14);*/

  return 0;
}