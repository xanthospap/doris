#include "atmosphere.hpp"
#include <cassert>
#include <cmath>
#include <cstdio>

// FORTRAN results in cm^3 and gr/cm^3
const dso::nrlmsise00::OutParams fortran[17] = {
 //Test Case 1
{{.6665196409719251096248627E+06, .1138817011630214750766754E+09, .1998245300782594457268715E+08, .4022842016927098156884313E+06, .3557550892430115709430538E+04, .4074761147187048783107490E-14, .3475316219767450093058869E+05, .4095947059164075646549463E+07, .2667263135389825038146228E+05}, {.1250539953424708301099599E+04, .1241416214400992885202868E+04}},
 //Test Case 2
{{.3407301767992988694459200E+07, .1586349959152341783046722E+09, .1391142775704556331038475E+08, .3262626855061790556646883E+06, .1559658189575704227536335E+04, .5001902948565172204158130E-14, .4854212843117712327511981E+05, .4381006715943604707717896E+07, .6956658104018885751429480E+04}, {.1166754463458593818359077E+04, .1161710576204604421945987E+04}},
 //Test Case 3
{{.1123762031800358090549707E+06, .6933984104861220112070441E+05, .4246944831477055970481160E+02, .1322692817336910964254315E+00, .2618705419250207393384866E-04, .2756727424621081634039524E-17, .2016747625683205478708260E+05, .5741146249028644888312556E+04, .2374374725929899796028621E+05}, {.1239892065079922303993953E+04, .1239890593607507298656856E+04}},
 //Test Case 4
{{.5411517598108120262622833E+08, .1918883047747712097167969E+12, .6115773403260706054687500E+13, .1225190508001696777343750E+13, .6023159047030828094482422E+11, .3584395815482149226155237E-09, .1059871229019792936742306E+08, .2615718526710793084930629E+06, .2819098018725757521084874E-41}, {.1027318464899999980843859E+04, .2068877474519080124082393E+03}},
 //Test Case 5
{{.1851126873497346416115761E+07, .1476568993165882229804993E+09, .1579382733012077957391739E+08, .2633845505820681573823094E+06, .1588819498469583777477965E+04, .4809681521029159190289313E-14, .5816170142247328476514667E+05, .5479030338664364069700241E+07, .1264442683339887025795178E+04}, {.1212396150853653580270475E+04, .1208135469463545177859487E+04}},
 //Test Case 6
{{.8673121091822464950382710E+06, .1278874767002349495887756E+09, .1822608065924403071403503E+08, .2922271541012128582224250E+06, .2403020512872970357420854E+04, .4355915884223564383414226E-14, .3686393886305268097203225E+05, .3897308971267943736165762E+07, .2667263135389825765741989E+05}, {.1220146405381342674445477E+04, .1212712134824864961046842E+04}},
 //Test Case 7
{{.5776270171643040375784039E+06, .6979209557913871109485626E+08, .1236835108300765790045261E+08, .2492917076559736160561442E+06, .1405772800992498787309160E+04, .2470680700007519834367473E-14, .5291993038070481270551682E+05, .1069822451993338763713837E+07, .2667263135389825765741989E+05}, {.1116385281735855187434936E+04, .1112998509671539750343072E+04}},
 //Test Case 8
{{.3740316880625992780551314E+06, .4782774709906643629074097E+08, .5240482457633839920163155E+07, .1759913659981462988071144E+06, .5501800011540102559592924E+03, .1571908645541425397992623E-14, .8896785505188225943129510E+05, .1979759363054214278236032E+07, .9121785804050641672802158E+04}, {.1031247447008468725471175E+04, .1024848549532437345988001E+04}},
 //Test Case 9
{{.6748358200373629806563258E+06, .1245327610050037950277328E+09, .2369049741142455115914345E+08, .4911677613155063008889556E+06, .4578890145802132792596240E+04, .4564473263802425525499431E-14, .3244598257877436117269099E+05, .5370876586214380338788033E+07, .2667263135389825765741989E+05}, {.1306052052109003852820024E+04, .1293374147854398643175955E+04}},
 //Test Case10
{{.5528616000662645092234015E+06, .1198052643551955223083496E+09, .3495854508549284189939499E+08, .9339789167125025996938348E+06, .1096281165916824284067843E+05, .4974601394554243654392007E-14, .2686430252875799124012701E+05, .4890013390274024568498135E+07, .2805436633016173800569959E+05}, {.1361868082489034804893890E+04, .1347389348678457736241398E+04}},
 //Test Case11
{{.1375375910828504062500000E+15, .0000000000000000000000000E+00, .2049520633893984665600000E+20, .5498249004547392512000000E+19, .2451534106232289600000000E+18, .1260963277470468837937467E-02, .0000000000000000000000000E+00, .0000000000000000000000000E+00, .0000000000000000000000000E+00}, {.1027318464899999980843859E+04, .2814647743974266518307559E+03}},
 //Test Case12
{{.4427116217880056250000000E+14, .0000000000000000000000000E+00, .6597080816782784512000000E+19, .1769798870718317568000000E+19, .7891098218994728000000000E+17, .4058840155545502341970232E-03, .0000000000000000000000000E+00, .0000000000000000000000000E+00, .0000000000000000000000000E+00}, {.1027318464899999980843859E+04, .2274179818386274689601123E+03}},
 //Test Case13
{{.2127705015053604492187500E+13, .0000000000000000000000000E+00, .3170606157094327680000000E+18, .8505785137636953600000000E+17, .3792520554808380000000000E+16, .1950708797608776063400166E-04, .0000000000000000000000000E+00, .0000000000000000000000000E+00, .0000000000000000000000000E+00}, {.1027318464899999980843859E+04, .2374389083674520577460498E+03}},
 //Test Case14
{{.1412119070043200988769531E+12, .0000000000000000000000000E+00, .2104273565345001600000000E+17, .5645134693751036000000000E+16, .2517026825187423750000000E+15, .1294649903870718881594595E-05, .0000000000000000000000000E+00, .0000000000000000000000000E+00, .0000000000000000000000000E+00}, {.1027318464899999980843859E+04, .2795550991077457183564547E+03}},
 //Test Case15
{{.1254842434368175697326660E+11, .0000000000000000000000000E+00, .1874469970742227750000000E+16, .4922885697875198750000000E+15, .2239610235067071093750000E+14, .1147629175848339877981881E-06, .0000000000000000000000000E+00, .0000000000000000000000000E+00, .0000000000000000000000000E+00}, {.1027318464899999980843859E+04, .2190732215885509504005313E+03}},
 //Test Case16
{{.5196490944287523161619902E+06, .1274509291303757429122925E+09, .4850556766797526180744171E+08, .1720881150168925756588578E+07, .2354564022947135526919737E+05, .5882034376977491127728251E-14, .2500077261331609406624921E+05, .6279273046018299646675587E+07, .2667263135389825765741989E+05}, {.1426414912871514843573095E+04, .1408610873731381616380531E+04}},
 //Test Case17
{{.4260836277097848802804947E+08, .1241336314230301361083984E+12, .4929527003120657226562500E+13, .1048399357180473754882812E+13, .4993429557914292144775391E+11, .2914283182496056470345234E-09, .8831165115632127970457077E+07, .2252503040163923869840801E+06, .2414578533801006003323654E-41}, {.1027318464899999980843859E+04, .1934071079579776153423154E+03}},
};

int main() {

  double DPRECISION[9];
  for (int i = 0; i < 9; i++)
    DPRECISION[i] = 1e-6;
  DPRECISION[5] = 1e-12;
  constexpr const double TPRECISION = 1e-6;

  dso::nrlmsise00::ApArray aph;
  for (int i = 0; i < 7; i++)
    aph.a[i] = 100;

  dso::nrlmsise00::InParams input[17];
  dso::nrlmsise00::OutParams out[17];

  for (int i = 0; i < 17; i++) {
    input[i].doy = 172;     // day of year
    input[i].year = 0;      // without effect
    input[i].sec = 29000e0; // ut
    input[i].alt = 400e0;
    input[i].glat = 60e0;
    input[i].glon = -70e0;
    input[i].lst = 16e0;
    input[i].f107A = 150e0;
    input[i].f107 = 150e0;
    input[i].ap = 4e0; // magnetic_index
  }

  input[1].doy = 81;
  input[2].sec = 75000e0;
  input[2].alt = 1000e0;
  input[3].alt = 100e0;
  input[10].alt = 0e0;
  input[11].alt = 10e0;
  input[12].alt = 30e0;
  input[13].alt = 50e0;
  input[14].alt = 70e0;
  input[16].alt = 100e0;
  input[4].glat = 0e0;
  input[5].glon = 0e0;
  input[6].lst = 4e0;
  input[7].f107A = 70e0;
  input[8].f107 = 180e0;
  input[9].ap = 40e0;

  dso::Nrlmsise00 Msise;
  int mass = 48;

  for (int i = 0; i < 17; i++) {
    input[i].set_switches_on();

    if (i >= 15) {
      input[i].set_switch(8,-1);
      input[i].set_ap_array(aph.a);
    }

    Msise.gtd7(&input[i], mass, &out[i]);

    // ref results (FORTRAN)
    const dso::nrlmsise00::OutParams *ref = fortran + i;

    // check density results
    for (int k = 0; k < 9; k++) {
      if (std::abs(out[i].d[k] - ref->d[k]) > DPRECISION[k]) {
        fprintf(stderr,
                "ERROR. Results differ! test-case %d / density index %d / "
                "difference %.15e\n",
                i, k, out[i].d[k] - ref->d[k]);
        if (k == 5)
          fprintf(stderr, "%20.15f Vs %20.15f\n", out[i].d[k], ref->d[k]);
        else
          fprintf(stderr, "%30.3f Vs %30.3f\n", out[i].d[k], ref->d[k]);
      }
    }

    // check temperature results
    for (int k = 0; k < 2; k++) {
      if (std::abs(out[i].t[k] - ref->t[k]) > TPRECISION) {
        fprintf(stderr,
                "ERROR. Results differ! test-case %d / temperature index %d / "
                "difference %.15e\n",
                i, k, out[i].t[k] - ref->t[k]);
        fprintf(stderr, "%20.15e Vs %20.15e\n", out[i].t[k], ref->t[k]);
      }
    }
  }

  return 0;
}
